


{







// 1


    "button elevated" : {
       "prefix": "-button 1 simple",
       "scope": "dart",
        "body": [
                                 
   " /* its take child */ ",
"   ElevatedButton(   ",
"   onPressed: () { ",
"     print(' Button Clicked'); ",
"   }, ",
"   child: Text('click_me'), ",
"   style: ElevatedButton.styleFrom( ",
"     padding: EdgeInsets.all(10), ",
"     fixedSize: Size(100, 40), ",
"     elevation: 30, ",
"     shadowColor: Color.fromARGB(255, 6, 0, 55), ",
"     side: BorderSide( ",
"         width: 2, ",
"         style: BorderStyle.solid, ",
"         strokeAlign: StrokeAlign.inside), ",
"     shape: StadiumBorder(side: BorderSide.none), ",
"   ), ",
" ), ",

      ],
        
        "description": "simple elevated button 1"
    },
























    "button gradient" : {
       "prefix": "-button 2 gradient",
       "scope": "dart",
        "body": [
                                 

   "       class ButtonImageFb1 extends StatelessWidget { ",
   "         final String text; ",
   "         final Function() onPressed; ",
   "         const ButtonImageFb1({required this.text, required this.onPressed, Key? key}) : super(key: key); ",
   "        ",
   "         @override ",
   "         Widget build(BuildContext context) { ",
   "           return Container( ",
   "             width: 200, ",
   "             child: AspectRatio( ",
   "               aspectRatio: 208 / 71, ",
   "               child: Container( ",
   "                 decoration: BoxDecoration(boxShadow: [ ",
   "                         BoxShadow( ",
   "                             offset: Offset(0, 4), ",
   "                             color: Color(0x4960F9).withOpacity(.3), ",
   "                             spreadRadius: 4, ",
   "                             blurRadius: 50) ",
   "                       ]), ",
   "                 child: MaterialButton( ",
   "                   onPressed: onPressed, ",
   "                   splashColor: Colors.lightBlue, ",
   "                   shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(36)), ",
   "                   padding: const EdgeInsets.all(0.0), ",
   "                   child: Ink( ",
   "                     decoration: BoxDecoration( ",
   "                       //gradient: ",
   "                       image: DecorationImage( ",
   "                         image: NetworkImage('https://firebasestorage.googleapis.com/v0/b/flutterbricks-public.appspot.com/o/finance_app_2%2FbuttonBackgroundSmall.png? ", "alt=media&token=fa2f9bba-120a-4a94-8bc2-f3adc2b58a73'), ",
   "                         fit: BoxFit.cover, ",
   "                       ), ",
   "                       borderRadius: BorderRadius.circular(36), ",
   "                     ), ",
   "                     child: Container( ",
   "                         constraints: const BoxConstraints( ",
   "                             minWidth: 88.0, ",
   "                             minHeight: 36.0), // min sizes for Material buttons ",
   "                         alignment: Alignment.center, ",
   "                         child:  Text(text, ",
   "                           style: TextStyle( ",
   "                               color: Colors.white, fontWeight: FontWeight.w300)))), ",
   "                   ), ",
   "                 ), ",
   "               ), ",
   "             ); ",
   "         } ",
   "       } ",

      ],
        
        "description": "gradient button 2 need network to load image"
    },

   



















    "button splash" : {
       "prefix": "-button 3 splash",
       "scope": "dart",
        "body": [
                                
"          class SplashButton extends StatelessWidget { ",
"            final String title; ",
"            final String subText; ",
"            final Function() onPressed; ",
"            const SplashButton( ",
"                {required this.title, ",
"                required this.onPressed, ",
"                this.subText = '', ",
"                Key? key}) ",
"                : super(key: key); ",
"           ",
"            @override ",
"            Widget build(BuildContext context) { ",
"              return Material( ",
"                shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(5.0)), ",
"                child: InkWell( ",
"                  onTap: onPressed, ",
"                  splashColor: Colors.purpleAccent, ",
"                  child: Container( ",
"                    width: MediaQuery.of(context).size.width, ",
"                    height: 75, ",
"                    padding: const EdgeInsets.all(25.0), ",
"                    decoration: BoxDecoration( ",
"                        color: Colors.transparent, ",
"                        borderRadius: BorderRadius.circular(5.0)), ",
"                    child: Row( ",
"                      mainAxisAlignment: MainAxisAlignment.spaceBetween, ",
"                      mainAxisSize: MainAxisSize.min, ",
"                      children: [ ",
"                        Text( ",
"                          title, ",
"                          style: const TextStyle( ",
"                              fontSize: 18, ",
"                              fontWeight: FontWeight.bold, ",
"                              color: Colors.black), ",
"                        ), ",
"                        Text( ",
"                          subText, ",
"                          style: const TextStyle( ",
"                              fontSize: 14, ",
"                              fontWeight: FontWeight.bold, ",
"                              color: Colors.black), ",
"                        ), ",
"                      ], ",
"                    ), ",
"                  ), ",
"                ), ",
"              ); ",
"            } ",
"          } ",
          

      ],
        
        "description": "splash button 3"
    },

   





    "button animated" : {
       "prefix": "-button 4 animated",
       "scope": "dart",
        "body": [
                                 


"          import 'package:vector_math/vector_math_64.dart' as vector; ",
"            ",
"          class LoadingAnimatedButton extends StatefulWidget { ",
"            final Duration duration; ",
"            final Widget child; ",
"            final Function() onTap; ",
"            final double width; ",
"            final double height; ",
"           ",
"            final Color color; ",
"            final double borderRadius; ",
"            final Color borderColor; ",
"            final double borderWidth; ",
"           ",
"            const LoadingAnimatedButton( ",
"                {Key? key, ",
"                required this.child, ",
"                required this.onTap, ",
"                this.width = 200, ",
"                this.height = 50, ",
"                this.color = Colors.indigo, ",
"                this.borderColor = Colors.white, ",
"                this.borderRadius = 15.0, ",
"                this.borderWidth = 3.0, ",
"                this.duration = const Duration(milliseconds: 1500)}) ",
"                : super(key: key); ",
"           ",
"            @override ",
"            State<LoadingAnimatedButton> createState() => _LoadingAnimatedButtonState(); ",
"          } ",
"           ",
"          class _LoadingAnimatedButtonState extends State<LoadingAnimatedButton> ",
"              with SingleTickerProviderStateMixin { ",
"            late AnimationController _animationController; ",
"           ",
"            @override ",
"            void initState() { ",
"              super.initState(); ",
"              _animationController = ",
"                  AnimationController(vsync: this, duration: widget.duration); ",
"              _animationController.repeat(); ",
"            } ",
"           ",
"            @override ",
"            void dispose() { ",
"              _animationController.dispose(); ",
"              super.dispose(); ",
"            } ",
"           ",
"            @override ",
"            Widget build(BuildContext context) { ",
"              return InkWell( ",
"                onTap: widget.onTap, ",
"                borderRadius: BorderRadius.circular( ",
"                  widget.borderRadius, ",
"                ), ",
"                splashColor: widget.color, ",
"                child: CustomPaint( ",
"                  painter: LoadingPainter( ",
"                      animation: _animationController, ",
"                      borderColor: widget.borderColor, ",
"                      borderRadius: widget.borderRadius, ",
"                      borderWidth: widget.borderWidth, ",
"                      color: widget.color), ",
"                  child: Container( ",
"                    width: widget.width, ",
"                    height: widget.height, ",
"                    alignment: Alignment.center, ",
"                    child: Padding( ",
"                      padding: const EdgeInsets.all(5.5), ",
"                      child: widget.child, ",
"                    ), ",
"                  ), ",
"                ), ",
"              ); ",
"            } ",
"          } ",
"           ",
"          class LoadingPainter extends CustomPainter { ",
"            final Animation animation; ",
"            final Color color; ",
"            final double borderRadius; ",
"            final Color borderColor; ",
"            final double borderWidth; ",
"           ",
"            LoadingPainter( ",
"                {required this.animation, ",
"                this.color = Colors.orange, ",
"                this.borderColor = Colors.white, ",
"                this.borderRadius = 15.0, ",
"                this.borderWidth = 3.0}) ",
"                : super(repaint: animation); ",
"           ",
"            @override ",
"            void paint(Canvas canvas, Size size) { ",
"              final rect = Offset.zero & size; ",
"              final paint = Paint() ",
"                ..shader = SweepGradient( ",
"                        colors: [ ",
"                          color.withOpacity(.25), ",
"                          color, ",
"                        ], ",
"                        startAngle: 0.0, ",
"                        endAngle: vector.radians(180), ",
"                        stops: const [.75, 1.0], ",
"                        transform: ",
"                            GradientRotation(vector.radians(360.0 * animation.value))) ",
"                    .createShader(rect); ",
"           ",
"              final path = Path.combine( ",
"                  PathOperation.xor, ",
"                  Path() ",
"                    ..addRRect( ",
"                        RRect.fromRectAndRadius(rect, Radius.circular(borderRadius))), ",
"                  Path() ",
"                    ..addRRect(RRect.fromRectAndRadius( ",
"                        rect.deflate(3.5), Radius.circular(borderRadius)))); ",
"              canvas.drawRRect( ",
"                  RRect.fromRectAndRadius( ",
"                      rect.deflate(1.5), Radius.circular(borderRadius)), ",
"                  Paint() ",
"                    ..color = borderColor ",
"                    ..strokeWidth = borderWidth ",
"                    ..style = PaintingStyle.stroke); ",
"              canvas.drawPath(path, paint); ",
"            } ",
"           ",
"            @override ",
"            bool shouldRepaint(covariant CustomPainter oldDelegate) { ",
"              return true; ",
"            } ",
"          } ",
"           ",
"           ",
"           ",
      ], 

       "description": "animated button 4 need to import vector math its not from packages" 
   }, 

























    "button toggle" : {
       "prefix": "-button 5 toggle",
       "scope": "dart",
        "body": [
                                 
          
"          class ToggleAnimatedIconButton extends StatefulWidget { ",
"            final List<String> toggleItems; ",
"            final AnimatedIconData? toggleIcon; ",
"            final Function(bool) onPressed; ",
"            final Duration animationDuration; ",
"            final Curve animationCurve; ",
"           ",
"            const ToggleAnimatedIconButton( ",
"                {required this.toggleItems, ",
"                this.toggleIcon, ",
"                required this.onPressed, ",
"                this.animationDuration = const Duration(milliseconds: 350), ",
"                this.animationCurve = Curves.bounceIn, ",
"                Key? key}) ",
"                : assert(toggleItems.length == 2), ",
"                  super(key: key); ",
"           ",
"            @override ",
"            State<ToggleAnimatedIconButton> createState() => ",
"                _ToggleAnimatedIconButtonState(); ",
"          } ",
"           ",
"          class _ToggleAnimatedIconButtonState extends State<ToggleAnimatedIconButton> ",
"              with SingleTickerProviderStateMixin { ",
"            late Animation<double> _animation; ",
"            late AnimationController _animationController; ",
"            bool state = false; ",
"            @override ",
"            void initState() { ",
"              super.initState(); ",
"              _animationController = ",
"                  AnimationController(vsync: this, duration: widget.animationDuration); ",
"          ",
"              _animation = CurvedAnimation(",
"                  parent: _animationController, curve: widget.animationCurve); ",
"            } ",
"           ",
"            @override ",
"            void dispose() { ",
"              super.dispose(); ",
"              _animationController.dispose(); ",
"            } ",
"           ",
"            @override ",
"            Widget build(BuildContext context) { ",
"              return FloatingActionButton.extended( ",
"                backgroundColor: Colors.indigo, ",
"                label: Row( ",
"                  children: [ ",
"                    Text(!state ? widget.toggleItems[0] : widget.toggleItems[1]), ",
"                    widget.toggleIcon != null",
"                        ? AnimatedIcon(icon: widget.toggleIcon!, progress: _animation) ",
"                        : Container(), ",
"                  ], ",
"                ), ",
"                onPressed: () { ",
"                  if (!state) { ",
"                    _animationController.forward(); ",
"                  } else { ",
"                    _animationController.reverse(); ",
"                  } ",
"                  widget.onPressed(state); ",
"                  setState(() { ",
"                    state = !state; ",
"                  }); ",
"                }, ",
"              ); ",
"            } ",
"          } ",


      ], 

       "description": "toggle button 5" 
   }, 

   













































































































    




  // 2  

    "Bottomnavbar Docked" : {
       "prefix": "-Bottomnavbardocked",
       "scope": "dart",
        "body": [
        "    floatingActionButtonLocation: FloatingActionButtonLocation.centerDocked,  ",
        "    bottomNavigationBar: BottomAppBar( ",
        "      shape: const CircularNotchedRectangle(), ",
        "      child: BottomNavigationBar( ",
        "        selectedItemColor: Colors.pink.shade900, ",
        "        unselectedItemColor: Colors.amber.shade700, ",
        "        selectedFontSize: 10, ",
        "        unselectedFontSize: 7, ",
        "        currentIndex: 0, ",
        "        enableFeedback: true, ",
        "        elevation: 30, ",
        "        // landscapeLayout: BottomNavigationBarLandscapeLayout.centered, ",
        "        items: <BottomNavigationBarItem>[ ",
        "          const BottomNavigationBarItem( ",
        "              icon: Icon(Icons.home), ",
        "              activeIcon: Icon(Icons.maps_home_work_rounded), ",
        "              tooltip: 'home_tooltip', ",
        "              label: 'Home_Label'), ",
        "          const BottomNavigationBarItem( ",
        "              icon: Icon(Icons.video_call), ",
        "              activeIcon: Icon(Icons.videocam_rounded), ",
        "              tooltip: 'tooltip', ",
        "              label: 'Label'), ",
        "          const BottomNavigationBarItem( ",
        "              icon: Icon(Icons.add_a_photo), ",
        "              activeIcon: Icon(Icons.add_a_photo_outlined), ",
        "              tooltip: 'photo_tooltip', ",
        "              label: 'photo_Label'), ",
        "        ], ",
        "        onTap: ((value) { ",
        "          print(value); ",
        "        }), ",
        "      ), ",
        "    ), ",
        "    floatingActionButton: FloatingActionButton( ",
        "      onPressed: () {}, ",
        "      hoverColor: Colors.amberAccent, ",
        "      child: Icon(Icons.local_post_office_rounded), ",
        "      tooltip: 'why open mail page', ",
        "      shape: ",
        "          BeveledRectangleBorder(borderRadius: BorderRadius.circular(20)), ",
        "    ), ",

      ],
        
        "description": "Bottomnavbar FAB Docked"
    },




    "Bottomnavbar notched" : {
       "prefix": "-Bottomnavbar Notched",
       "scope": "dart",
        "body": [
      "      floatingActionButtonLocation: FloatingActionButtonLocation.startDocked,        ",
      "      bottomNavigationBar: BottomAppBar(    ",
      "        notchMargin: 10,    ",
      "        shape: CircularNotchedRectangle(),    ",
      "        child: Row(    ",
      "          mainAxisAlignment: MainAxisAlignment.spaceEvenly,    ",
      "          crossAxisAlignment: CrossAxisAlignment.end,    ",
      "          children: [    ",
      "            IconButton(    ",
      "              icon: const Icon(Icons.home),    ",
      "              tooltip: 'home_tooltip',    ",
      "              onPressed: () {},    ",
      "              hoverColor: Color.fromARGB(26, 5, 252, 232),    ",
      "              splashColor: Color.fromARGB(255, 158, 180, 190),    ",
      "              focusColor: Color.fromARGB(255, 61, 11, 65),    ",
      "              color: Colors.indigoAccent,    ",
      "            ),    ",
      "            IconButton(    ",
      "              icon: const Icon(Icons.video_call),    ",
      "              tooltip: 'video_tooltip',    ",
      "              onPressed: () {},    ",
      "              hoverColor: Color.fromARGB(26, 5, 252, 232),    ",
      "              splashColor: Color.fromARGB(255, 158, 180, 190),    ",
      "              focusColor: Color.fromARGB(255, 61, 11, 65),    ",
      "              color: Colors.indigoAccent,    ",
      "            ),    ",
      "            IconButton(    ",
      "              icon: const Icon(Icons.add_a_photo),    ",
      "              tooltip: 'photo_tooltip',    ",
      "              onPressed: () {},    ",
      "              hoverColor: Color.fromARGB(26, 5, 252, 232),    ",
      "              splashColor: Color.fromARGB(255, 158, 180, 190),    ",
      "              focusColor: Color.fromARGB(255, 61, 11, 65),    ",
      "              color: Colors.indigoAccent,    ",
      "            ),    ",
      "            IconButton(    ",
      "              icon: const Icon(Icons.arrow_forward),    ",
      "              tooltip: 'arrow_tooltip',    ",
      "              onPressed: () {},    ",
      "              hoverColor: Color.fromARGB(26, 5, 252, 232),    ",
      "              splashColor: Color.fromARGB(255, 158, 180, 190),    ",
      "              focusColor: Color.fromARGB(255, 61, 11, 65),    ",
      "              color: Colors.indigoAccent,    ",
      "            ),    ",
      "          ],    ",
      "        ),    ",
      "      ),    ",
      "      floatingActionButton: FloatingActionButton(    ",
      "        mini: true,    ",
      "        onPressed: () {},    ",
      "        hoverColor: Colors.amberAccent,    ",
      "        child: Icon(Icons.local_post_office_rounded),    ",
      "        tooltip: 'why open mail page',    ",
      "        shape: RoundedRectangleBorder(    ",
      "            borderRadius: BorderRadius.all(Radius.circular(50))),    ",
      "      ),    ",

      ],
        
        "description": "Bottomnavbar with FAB Notched"
    },







    "bottom navbar 3 opaque" : {
      "prefix": "-bottom navbar 3 opaque",
      "scope": "dart",
       "body": [

"        class BottomNavBarTransparentFb1 extends StatefulWidget { ",
"          const BottomNavBarTransparentFb1({Key? key}) : super(key: key); ",
"         ",
"          @override ",
"          _BottomNavBarTransparentFb1State createState() => _BottomNavBarTransparentFb1State(); ",
"        } ",
"         ",
"        class _BottomNavBarTransparentFb1State extends State<BottomNavBarTransparentFb1> { ",
"           ",
"          //- - - - - - - - - instructions - - - - - - - - - - - - - - - - - - ",
"          // WARNING! MUST ADD extendBody: true; TO CONTAINING SCAFFOLD ",
"          // ",
"          // Instructions: ",
"          // ",
"          // add this widget to the bottomNavigationBar property of a Scaffold, along with ",
"          // setting the extendBody parameter to true i.e: ",
"          // ",
"          // Scaffold( ",
"          //  extendBody: true, ",
"          //  bottomNavigationBar: BottomNavBarTransparentFb1() ",
"          // ) ",
"          // ",
"          // Properties such as color and height can be set by changing the properties at the top of the build method ",
"          // ",
"          // For help implementing this in a real app, watch https://www.youtube.com/watch?v=C0_3w0kd0nc. The style is different, but connecting it to navigation is the same.   ",
"          // ",
"          //- - - - - - - - - - - - - - -  - - - - - - - - - - - - - - - - - - ",
"         ",
"          @override ",
"          Widget build(BuildContext context) { ",
"            Size size = MediaQuery.of(context).size; ",
"            double height = 56; ",
"         ",
"            final primaryColor = Colors.orange; ",
"            final secondaryColor = Colors.black54; ",
"            final accentColor = const Color(0xffffffff); ",
"            final backgroundColor = Colors.black12.withOpacity(.2); ",
"         ",
"            return BottomAppBar( ",
"              color: backgroundColor, ",
"              elevation: 0, ",
"              child: Stack( ",
"                children: [ ",
"                  Container( ",
"                    height: height, ",
"                    child: Row( ",
"                      mainAxisAlignment: MainAxisAlignment.spaceAround, ",
"                      children: [ ",
"                        NavBarIcon( ",
"                          text: 'Home', ",
"                          icon: Icons.home_outlined, ",
"                          selected: true, ",
"                          onPressed: () {}, ",
"                          defaultColor: secondaryColor, ",
"                          selectedColor: primaryColor, ",
"                        ), ",
"                        NavBarIcon( ",
"                          text: 'Search', ",
"                          icon: Icons.search_outlined, ",
"                          selected: false, ",
"                          onPressed: () {}, ",
"                          defaultColor: secondaryColor, ",
"                          selectedColor: primaryColor, ",
"                        ), ",
"                        NavBarIcon( ",
"                            text: 'Cart', ",
"                            icon: Icons.local_grocery_store_outlined, ",
"                            selected: false, ",
"                            onPressed: () {}, ",
"                            defaultColor: secondaryColor, ",
"                            selectedColor: primaryColor), ",
"                        NavBarIcon( ",
"                          text: 'Calendar', ",
"                          icon: Icons.date_range_outlined, ",
"                          selected: false, ",
"                          onPressed: () {}, ",
"                          selectedColor: primaryColor, ",
"                          defaultColor: secondaryColor, ",
"                        ) ",
"                      ], ",
"                    ), ",
"                  ), ",
"                ], ",
"              ), ",
"            ); ",
"          } ",
"        } ",
"        class NavBarIcon extends StatelessWidget { ",
"          const NavBarIcon( ",
"              {Key? key, ",
"              required this.text, ",
"              required this.icon, ",
"              required this.selected, ",
"              required this.onPressed, ",
"              this.selectedColor = const Color(0xffFF8527), ",
"              this.defaultColor = Colors.black54}) ",
"              : super(key: key); ",
"          final String text; ",
"          final IconData icon; ",
"          final bool selected; ",
"          final Function() onPressed; ",
"          final Color defaultColor; ",
"          final Color selectedColor; ",
"         ",
"          @override ",
"          Widget build(BuildContext context) { ",
"            return Column( ",
"              mainAxisAlignment: MainAxisAlignment.center, ",
"              children: [ ",
"                IconButton( ",
"                  onPressed: onPressed, ",
"                  icon: Icon( ",
"                    icon, ",
"                    size: 25, ",
"                    color: selected ? selectedColor : defaultColor, ",
"                  ), ",
"                ), ",
"              ], ",
"            ); ",
"          } ",
"        } ",
        
     
     ],
       
       "description": "bottom navbar 3 opaque with transparent"
   },

   "bottom nav bar transparent" : {
    "prefix": "-bottom navbar transparent",
    "scope": "dart",
     "body": [
  
 " // No state included ",
 " class TransparentBtmNavBarCurvedFb1 extends StatefulWidget { ",
 "   final Color primaryColor; ",
 "   final Color secondaryColor; ",
 "   final Color backgroundColor; ",
 "  ",
 "   TransparentBtmNavBarCurvedFb1( ",
 "       {this.primaryColor = Colors.green, ",
 "       this.secondaryColor = Colors.white, ",
 "       Key? key}) ",
 "       : backgroundColor = Colors.black.withOpacity(.5), ",
 "         super( ",
 "           key: key, ",
 "         ); ",
 "  ",
 "   @override ",
 "   _TransparentBtmNavBarCurvedFb1State createState() => ",
 "       _TransparentBtmNavBarCurvedFb1State(); ",
 " } ",
 "  ",
 " class _TransparentBtmNavBarCurvedFb1State ",
 "     extends State<TransparentBtmNavBarCurvedFb1> { ",
 "   //- - - - - - - - - instructions - - - - - - - - - - - - - - - - - - ",
 "   // WARNING! MUST ADD extendBody: true; TO CONTAINING SCAFFOLD ",
 "   // ",
 "   // Instructions: ",
 "   // ",
 "   // add this widget to the bottomNavigationBar property of a Scaffold, along with ",
 "   // setting the extendBody parameter to true i.e: ",
 "   // ",
 "   // Scaffold( ",
 "   //  extendBody: true, ",
 "   //  bottomNavigationBar: BottomNavBarCurvedFb1() ",
 "   // ) ",
 "   // ",
 "   // Properties such as color and height can be set by changing the properties at the top of the build method ",
 "   // ",
 "   // For help implementing this in a real app, watch https://www.youtube.com/watch?v=C0_3w0kd0nc. The style is different, but connecting it to navigation is the same.   ",
 "   // ",
 "   //- - - - - - - - - - - - - - -  - - - - - - - - - - - - - - - - - - ",
 "  ",
 "   @override ",
 "   Widget build(BuildContext context) { ",
 "     Size size = MediaQuery.of(context).size; ",
 "     double height = 56; ",
 "  ",
 "     final primaryColor = widget.primaryColor; ",
 "     final secondaryColor = widget.secondaryColor; ",
 "     final backgroundColor = widget.backgroundColor; ",
 "  ",
 "     return BottomAppBar( ",
 "       color: Colors.transparent, ",
 "       elevation: 0, ",
 "       child: Stack( ",
 "         children: [ ",
 "           CustomPaint( ",
 "             size: Size(size.width, height + 6), ",
 "             painter: BottomNavCurvePainter(backgroundColor: backgroundColor), ",
 "           ), ",
 "           Center( ",
 "             heightFactor: 0.6, ",
 "             child: FloatingActionButton( ",
 "                 backgroundColor: primaryColor, ",
 "                 child: const Icon(Icons.landscape), ",
 "                 elevation: 0.1, ",
 "                 onPressed: () {}), ",
 "           ), ",
 "           SizedBox( ",
 "             height: height, ",
 "             child: Row( ",
 "               mainAxisAlignment: MainAxisAlignment.spaceAround, ",
 "               children: [ ",
 "                 NavBarIcon( ",
 "                   text: 'Home', ",
 "                   icon: Icons.home_outlined, ",
 "                   selected: true, ",
 "                   onPressed: () {}, ",
 "                   defaultColor: secondaryColor, ",
 "                   selectedColor: primaryColor, ",
 "                 ), ",
 "                 NavBarIcon( ",
 "                   text: 'Search', ",
 "                   icon: Icons.search_outlined, ",
 "                   selected: false, ",
 "                   onPressed: () {}, ",
 "                   defaultColor: secondaryColor, ",
 "                   selectedColor: primaryColor, ",
 "                 ), ",
 "                 const SizedBox(width: 56), ",
 "                 NavBarIcon( ",
 "                     text: 'Add', ",
 "                     icon: Icons.local_grocery_store_outlined, ",
 "                     selected: false, ",
 "                     onPressed: () {}, ",
 "                     defaultColor: secondaryColor, ",
 "                     selectedColor: primaryColor), ",
 "                 NavBarIcon( ",
 "                   text: 'Calendar', ",
 "                   icon: Icons.date_range_outlined, ",
 "                   selected: false, ",
 "                   onPressed: () {}, ",
 "                   selectedColor: primaryColor, ",
 "                   defaultColor: secondaryColor, ",
 "                 ) ",
 "               ], ",
 "             ), ",
 "           ), ",
 "         ], ",
 "       ), ",
 "     ); ",
 "   } ",
 " } ",
 "  ",
 " class BottomNavCurvePainter extends CustomPainter { ",
 "   BottomNavCurvePainter( ",
 "       {this.backgroundColor = Colors.white, this.insetRadius = 38}); ",
 "  ",
 "   Color backgroundColor; ",
 "   double insetRadius; ",
 "   @override ",
 "   void paint(Canvas canvas, Size size) { ",
 "     Paint paint = Paint() ",
 "       ..color = backgroundColor ",
 "       ..style = PaintingStyle.fill; ",
 "     Path path = Path()..moveTo(0, 12); ",
 "  ",
 "     double insetCurveBeginnningX = size.width / 2 - insetRadius; ",
 "     double insetCurveEndX = size.width / 2 + insetRadius; ",
 "     double transitionToInsetCurveWidth = size.width * .05; ",
 "     path.quadraticBezierTo(size.width * 0.20, 0, ",
 "         insetCurveBeginnningX - transitionToInsetCurveWidth, 0); ",
 "     path.quadraticBezierTo( ",
 "         insetCurveBeginnningX, 0, insetCurveBeginnningX, insetRadius / 2); ",
 "  ",
 "     path.arcToPoint(Offset(insetCurveEndX, insetRadius / 2), ",
 "         radius: Radius.circular(10.0), clockwise: false); ",
 "  ",
 "     path.quadraticBezierTo( ",
 "         insetCurveEndX, 0, insetCurveEndX + transitionToInsetCurveWidth, 0); ",
 "     path.quadraticBezierTo(size.width * 0.80, 0, size.width, 12); ",
 "     path.lineTo(size.width, size.height + 56); ",
 "     path.lineTo( ",
 "         0, ",
 "         size.height + ",
 "             56); //+56 here extends the navbar below app bar to include extra space on some screens (iphone 11) ",
 "     canvas.drawPath(path, paint); ",
 "   } ",
 "  ",
 "   @override ",
 "   bool shouldRepaint(CustomPainter oldDelegate) { ",
 "     return false; ",
 "   } ",
 " } ",
 "  ",
 " class NavBarIcon extends StatelessWidget { ",
 "   const NavBarIcon( ",
 "       {Key? key, ",
 "       required this.text, ",
 "       required this.icon, ",
 "       required this.selected, ",
 "       required this.onPressed, ",
 "       this.selectedColor = const Color(0xffFF8527), ",
 "       this.defaultColor = Colors.black54}) ",
 "       : super(key: key); ",
 "   final String text; ",
 "   final IconData icon; ",
 "   final bool selected; ",
 "   final Function() onPressed; ",
 "   final Color defaultColor; ",
 "   final Color selectedColor; ",
 "  ",
 "   @override ",
 "   Widget build(BuildContext context) { ",
 "     return Column( ",
 "       mainAxisAlignment: MainAxisAlignment.center, ",
 "       children: [ ",
 "         IconButton( ",
 "           onPressed: onPressed, ",
 "           splashColor: Colors.transparent, ",
 "           highlightColor: Colors.transparent, ",
 "           icon: Icon( ",
 "             icon, ",
 "             size: 25, ",
 "             color: selected ? selectedColor : defaultColor, ",
 "           ), ",
 "         ), ",
 "       ], ",
 "     ); ",
 "   } ",
 " } ",
   
   ],
     
     "description": "Transparent Btm NavBar CurvedFb1 "
 },



 "bottom navbar 4 leading type" : {
  "prefix": "-bottom navbar 4 leading type",
  "scope": "dart",
   "body": [
  
"    class BottomNavBarFb3 extends StatelessWidget { ",
"      const BottomNavBarFb3({Key? key}) : super(key: key); ",
"     ",
"      final primaryColor = const Color(0xff4338CA); ",
"      final secondaryColor = const Color(0xff6D28D9); ",
"      final accentColor = const Color(0xffffffff); ",
"      final backgroundColor = const Color(0xffffffff); ",
"      final errorColor = const Color(0xffEF4444); ",
"     ",
"      @override ",
"      Widget build(BuildContext context) { ",
"        return BottomAppBar( ",
"          color: Colors.white, ",
"          child: SizedBox( ",
"            height: 56, ",
"            width: MediaQuery.of(context).size.width, ",
"            child: Padding( ",
"              padding: const EdgeInsets.only(left: 25.0, right: 25.0),   ",
"              child: Row( ",
"                mainAxisAlignment: MainAxisAlignment.spaceBetween, ",
"                children: [ ",
"                  IconBottomBar2( ",
"                      text: 'Home', ",
"                      icon: Icons.home, ",
"                      selected: true, ",
"                      onPressed: () {}), ",
"                  Spacer(), ",
"                  IconBottomBar( ",
"                      text: 'Search', ",
"                      icon: Icons.search_outlined, ",
"                      selected: false, ",
"                      onPressed: () {}), ",
"                  IconBottomBar( ",
"                      text: 'Cart', ",
"                      icon: Icons.local_grocery_store_outlined, ",
"                      selected: false, ",
"                      onPressed: () {}), ",
"                  IconBottomBar( ",
"                      text: 'Calendar', ",
"                      icon: Icons.date_range_outlined, ",
"                      selected: false, ",
"                      onPressed: () {}) ",
"                ], ",
"              ), ",
"            ), ",
"          ), ",
"        ); ",
"      } ",
"    } ",
"     ",
"    class IconBottomBar extends StatelessWidget { ",
"      const IconBottomBar( ",
"          {Key? key, ",
"          required this.text, ",
"          required this.icon, ",
"          required this.selected, ",
"          required this.onPressed}) ",
"          : super(key: key); ",
"      final String text; ",
"      final IconData icon; ",
"      final bool selected; ",
"      final Function() onPressed; ",
"     ",
"      final primaryColor = const Color(0xff4338CA); ",
"     ",
"      @override ",
"      Widget build(BuildContext context) { ",
"        return Column( ",
"          mainAxisAlignment: MainAxisAlignment.center, ",
"          children: [ ",
"            IconButton( ",
"              onPressed: onPressed, ",
"              icon: Icon( ",
"                icon, ",
"                size: 25, ",
"                color: selected ? primaryColor : Colors.black54, ",
"              ), ",
"            ), ",
"          ], ",
"        ); ",
"      } ",
"    } ",
"     ",
"    class IconBottomBar2 extends StatelessWidget { ",
"      const IconBottomBar2( ",
"          {Key? key, ",
"          required this.text, ",
"          required this.icon, ",
"          required this.selected, ",
"          required this.onPressed}) ",
"          : super(key: key); ",
"      final String text; ",
"      final IconData icon; ",
"      final bool selected; ",
"      final Function() onPressed; ",
"      final primaryColor = const Color(0xff4338CA); ",
"      @override ",
"      Widget build(BuildContext context) { ",
"        return CircleAvatar( ",
"          backgroundColor: primaryColor, ",
"          child: IconButton( ",
"            onPressed: onPressed, ",
"            icon: Icon( ",
"              icon, ",
"              size: 25, ",
"              color: Colors.white, ",
"            ), ",
"          ), ",
"        ); ",
"      } ",
"    } ",
    
    
 ],
   
   "description": "bottom navbar 4 leading type"
},







"bottom navbar 5 raised type" : {
  "prefix": "-bottom navbar 5 raised type",
  "scope": "dart",
   "body": [
 

 "    class BottomNavBarRaisedInsetFb1 extends StatefulWidget { ",
 "      const BottomNavBarRaisedInsetFb1({Key? key}) : super(key: key); ",
 "     ",
 "      @override ",
 "      _BottomNavBarRaisedInsetFb1State createState() => _BottomNavBarRaisedInsetFb1State(); ",
 "    } ",
 "     ",
 "    class _BottomNavBarRaisedInsetFb1State extends State<BottomNavBarRaisedInsetFb1> { ",
 "       ",
 "      //- - - - - - - - - instructions - - - - - - - - - - - - - - - - - - ",
 "      // WARNING! MUST ADD extendBody: true; TO CONTAINING SCAFFOLD ",
 "      // ",
 "      // Instructions: ",
 "      // ",
 "      // add this widget to the bottomNavigationBar property of a Scaffold, along with ",
 "      // setting the extendBody parameter to true i.e: ",
 "      // ",
 "      // Scaffold( ",
 "      //  extendBody: true, ",
 "      //  bottomNavigationBar: BottomNavBarRaisedInsetFb1() ",
 "      // ) ",
 "      // ",
 "      // Properties such as color and height can be set by changing the properties at the top of the build method ",
 "      // ",
 "      // For help implementing this in a real app, watch https://www.youtube.com/watch?v=C0_3w0kd0nc. The style is different, but connecting it to navigation is the same.  ",
 "      // ",
 "      //- - - - - - - - - - - - - - -  - - - - - - - - - - - - - - - - - - ",
 "     ",
 "      @override ",
 "      Widget build(BuildContext context) { ",
 "        Size size = MediaQuery.of(context).size; ",
 "        double height = 56; ",
 "     ",
 "        final primaryColor = Colors.blue; ",
 "        final secondaryColor = Colors.black54; ",
 "        final accentColor = const Color(0xffffffff); ",
 "        final backgroundColor = Colors.white; ",
 "     ",
 "        final shadowColor = Colors.grey; //color of Navbar shadow ",
 "        double elevation = 100; //Elevation of the bottom Navbar ",
 "     ",
 "        return BottomAppBar( ",
 "          color: Colors.transparent, ",
 "          elevation: 0, ",
 "          child: Stack( ",
 "            children: [ ",
 "              CustomPaint( ",
 "                size: Size(size.width, height), ",
 "                painter: BottomNavCurvePainter(backgroundColor: backgroundColor, shadowColor: shadowColor, elevation: elevation), ",
 "              ), ",
 "              Center( ",
 "                heightFactor: 0.6, ",
 "                child: FloatingActionButton( ",
 "                    backgroundColor: primaryColor, ",
 "                    child: Icon(Icons.shopping_basket), ",
 "                    elevation: 0.1, ",
 "                    onPressed: () {}), ",
 "              ), ",
 "              Container( ",
 "                height: height, ",
 "                child: Row( ",
 "                  mainAxisAlignment: MainAxisAlignment.spaceAround, ",
 "                  children: [ ",
 "                    NavBarIcon( ",
 "                      text: 'Home', ",
 "                      icon: Icons.home_outlined, ",
 "                      selected: true, ",
 "                      onPressed: () {}, ",
 "                      defaultColor: secondaryColor, ",
 "                      selectedColor: primaryColor, ",
 "                    ), ",
 "                    NavBarIcon( ",
 "                      text: 'Search', ",
 "                      icon: Icons.search_outlined, ",
 "                      selected: false, ",
 "                      onPressed: () {}, ",
 "                      defaultColor: secondaryColor, ",
 "                      selectedColor: primaryColor, ",
 "                    ), ",
 "                    SizedBox(width: 56), ",
 "                    NavBarIcon( ",
 "                        text: 'Cart', ",
 "                        icon: Icons.local_grocery_store_outlined, ",
 "                        selected: false, ",
 "                        onPressed: () {}, ",
 "                        defaultColor: secondaryColor, ",
 "                        selectedColor: primaryColor), ",
 "                    NavBarIcon( ",
 "                      text: 'Calendar', ",
 "                      icon: Icons.date_range_outlined, ",
 "                      selected: false, ",
 "                      onPressed: () {}, ",
 "                      selectedColor: primaryColor, ",
 "                      defaultColor: secondaryColor, ",
 "                    ) ",
 "                  ], ",
 "                ), ",
 "              ), ",
 "            ], ",
 "          ), ",
 "        ); ",
 "      } ",
 "    } ",
 "     ",
 "    class BottomNavCurvePainter extends CustomPainter { ",
 "      BottomNavCurvePainter({this.backgroundColor = Colors.white, this.insetRadius = 38, this.shadowColor = Colors.grey, this.elevation = 100}); ",
 "     ",
 "      Color backgroundColor; ",
 "      Color shadowColor; ",
 "      double elevation;  ",
 "      double insetRadius; ",
 "      @override ",
 "      void paint(Canvas canvas, Size size) { ",
 "     ",
 "        Paint paint = Paint() ",
 "          ..color = backgroundColor ",
 "          ..style = PaintingStyle.fill; ",
 "        Path path = Path(); ",
 "     ",
 "        double insetCurveBeginnningX = size.width / 2 - insetRadius; ",
 "        double insetCurveEndX = size.width / 2 + insetRadius; ",
 "        ",
 "        path.lineTo(insetCurveBeginnningX, 0); ",
 "        path.arcToPoint(Offset(insetCurveEndX, 0), ",
 "            radius: Radius.circular(41), clockwise: true); ",
 "        ",
 "        path.lineTo(size.width, 0); ",
 "     ",
 "        path.lineTo(size.width, size.height + 56); ",
 "        path.lineTo( ",
 "            0, ",
 "            size.height + ",
 "                56); //+56 here extends the navbar below app bar to include extra space on some screens (iphone 11) ",
 "        canvas.drawShadow(path, shadowColor, elevation, true); ",
 "        canvas.drawPath(path, paint); ",
 "      } ",
 "     ",
 "      @override ",
 "      bool shouldRepaint(CustomPainter oldDelegate) { ",
 "        return false; ",
 "      } ",
 "    } ",
 "     ",
 "    class NavBarIcon extends StatelessWidget { ",
 "      const NavBarIcon( ",
 "          {Key? key, ",
 "          required this.text, ",
 "          required this.icon, ",
 "          required this.selected, ",
 "          required this.onPressed, ",
 "          this.selectedColor = const Color(0xffFF8527), ",
 "          this.defaultColor = Colors.black54}) ",
 "          : super(key: key); ",
 "      final String text; ",
 "      final IconData icon; ",
 "      final bool selected; ",
 "      final Function() onPressed; ",
 "      final Color defaultColor; ",
 "      final Color selectedColor; ",
 "     ",
 "      @override ",
 "      Widget build(BuildContext context) { ",
 "        return Column( ",
 "          mainAxisAlignment: MainAxisAlignment.center, ",
 "          children: [ ",
 "            IconButton( ",
 "              onPressed: onPressed, ",
 "              splashColor: Colors.transparent, ",
 "              highlightColor: Colors.transparent, ",
 "              icon: Icon( ",
 "                icon, ",
 "                size: 25, ",
 "                color: selected ? selectedColor : defaultColor, ",
 "              ), ",
 "            ), ",
 "          ], ",
 "        ); ",
 "      } ",
 "    } ",
    
 
 ],
   
   "description": "bottom navbar 4 raised type"
},



"bottom navbar curved" : {
  "prefix": "-bottom navbar 5 curved",
  "scope": "dart",
   "body": [




 "    class BottomNavBarCurvedFb1 extends StatefulWidget { ",
 "      const BottomNavBarCurvedFb1({Key? key}) : super(key: key); ",
 "     ",
 "      @override ",
 "      _BottomNavBarCurvedFb1State createState() => _BottomNavBarCurvedFb1State(); ",
 "    } ",
 "     ",
 "    class _BottomNavBarCurvedFb1State extends State<BottomNavBarCurvedFb1> { ",
 "       ",
 "      //- - - - - - - - - instructions - - - - - - - - - - - - - - - - - - ",
 "      // WARNING! MUST ADD extendBody: true; TO CONTAINING SCAFFOLD ",
 "      // ",
 "      // Instructions: ",
 "      // ",
 "      // add this widget to the bottomNavigationBar property of a Scaffold, along with ",
 "      // setting the extendBody parameter to true i.e: ",
 "      // ",
 "      // Scaffold( ",
 "      //  extendBody: true, ",
 "      //  bottomNavigationBar: BottomNavBarCurvedFb1() ",
 "      // ) ",
 "      // ",
 "      // Properties such as color and height can be set by changing the properties at the top of the build method ",
 "      // ",
 "      // For help implementing this in a real app, watch https://www.youtube.com/watch?v=C0_3w0kd0nc. The style is different, but connecting it to navigation is the same.   ",
 "      // ",
 "      //- - - - - - - - - - - - - - -  - - - - - - - - - - - - - - - - - - ",
 "     ",
 "      @override ",
 "      Widget build(BuildContext context) { ",
 "        Size size = MediaQuery.of(context).size; ",
 "        double height = 56; ",
 "     ",
 "        final primaryColor = Colors.orange; ",
 "        final secondaryColor = Colors.black54; ",
 "        final accentColor = const Color(0xffffffff); ",
 "        final backgroundColor = Colors.white; ",
 "     ",
 "        return BottomAppBar( ",
 "          color: Colors.transparent, ",
 "          elevation: 0, ",
 "          child: Stack( ",
 "            children: [ ",
 "              CustomPaint( ",
 "                size: Size(size.width, height + 6), ",
 "                painter: BottomNavCurvePainter(backgroundColor: backgroundColor), ",
 "              ), ",
 "              Center( ",
 "                heightFactor: 0.6, ",
 "                child: FloatingActionButton( ",
 "                    backgroundColor: primaryColor, ",
 "                    child: Icon(Icons.shopping_basket), ",
 "                    elevation: 0.1, ",
 "                    onPressed: () {}), ",
 "              ), ",
 "              Container( ",
 "                height: height, ",
 "                child: Row( ",
 "                  mainAxisAlignment: MainAxisAlignment.spaceAround, ",
 "                  children: [ ",
 "                    NavBarIcon( ",
 "                      text: 'Home', ",
 "                      icon: Icons.home_outlined, ",
 "                      selected: true, ",
 "                      onPressed: () {}, ",
 "                      defaultColor: secondaryColor, ",
 "                      selectedColor: primaryColor, ",
 "                    ), ",
 "                    NavBarIcon( ",
 "                      text: 'Search', ",
 "                      icon: Icons.search_outlined, ",
 "                      selected: false, ",
 "                      onPressed: () {}, ",
 "                      defaultColor: secondaryColor, ",
 "                      selectedColor: primaryColor, ",
 "                    ), ",
 "                    SizedBox(width: 56), ",
 "                    NavBarIcon( ",
 "                        text: 'Cart', ",
 "                        icon: Icons.local_grocery_store_outlined, ",
 "                        selected: false, ",
 "                        onPressed: () {}, ",
 "                        defaultColor: secondaryColor, ",
 "                        selectedColor: primaryColor), ",
 "                    NavBarIcon( ",
 "                      text: 'Calendar', ",
 "                      icon: Icons.date_range_outlined, ",
 "                      selected: false, ",
 "                      onPressed: () {}, ",
 "                      selectedColor: primaryColor, ",
 "                      defaultColor: secondaryColor, ",
 "                    ) ",
 "                  ], ",
 "                ), ",
 "              ), ",
 "            ], ",
 "          ), ",
 "        ); ",
 "      } ",
 "    } ",
 "     ",
 "    class BottomNavCurvePainter extends CustomPainter { ",
 "      BottomNavCurvePainter({this.backgroundColor = Colors.white, this.insetRadius = 38}); ",
 "     ",
 "      Color backgroundColor; ",
 "      double insetRadius; ",
 "      @override ",
 "      void paint(Canvas canvas, Size size) { ",
 "     ",
 "        Paint paint = Paint() ",
 "          ..color = backgroundColor ",
 "          ..style = PaintingStyle.fill; ",
 "        Path path = Path()..moveTo(0, 12); ",
 "     ",
 "        double insetCurveBeginnningX = size.width / 2 - insetRadius; ",
 "        double insetCurveEndX = size.width / 2 + insetRadius; ",
 "        double transitionToInsetCurveWidth = size.width * .05; ",
 "        path.quadraticBezierTo(size.width * 0.20, 0, ",
 "            insetCurveBeginnningX - transitionToInsetCurveWidth, 0); ",
 "        path.quadraticBezierTo( ",
 "            insetCurveBeginnningX, 0, insetCurveBeginnningX, insetRadius / 2); ",
 "     ",
 "        path.arcToPoint(Offset(insetCurveEndX, insetRadius / 2), ",
 "            radius: Radius.circular(10.0), clockwise: false); ",
 "     ",
 "        path.quadraticBezierTo( ",
 "            insetCurveEndX, 0, insetCurveEndX + transitionToInsetCurveWidth, 0); ",
 "        path.quadraticBezierTo(size.width * 0.80, 0, size.width, 12); ",
 "        path.lineTo(size.width, size.height + 56); ",
 "        path.lineTo( ",
 "            0, ",
 "            size.height + ",
 "                56); //+56 here extends the navbar below app bar to include extra space on some screens (iphone 11) ",
 "        canvas.drawPath(path, paint); ",
 "      } ",
 "     ",
 "      @override ",
 "      bool shouldRepaint(CustomPainter oldDelegate) { ",
 "        return false; ",
 "      } ",
 "    } ",
 "     ",
 "    class NavBarIcon extends StatelessWidget { ",
 "      const NavBarIcon( ",
 "          {Key? key, ",
 "          required this.text, ",
 "          required this.icon, ",
 "          required this.selected, ",
 "          required this.onPressed, ",
 "          this.selectedColor = const Color(0xffFF8527), ",
 "          this.defaultColor = Colors.black54}) ",
 "          : super(key: key); ",
 "      final String text; ",
 "      final IconData icon; ",
 "      final bool selected; ",
 "      final Function() onPressed; ",
 "      final Color defaultColor; ",
 "      final Color selectedColor; ",
 "     ",
 "      @override ",
 "      Widget build(BuildContext context) { ",
 "        return Column( ",
 "          mainAxisAlignment: MainAxisAlignment.center, ",
 "          children: [ ",
 "            IconButton( ",
 "              onPressed: onPressed, ",
 "              splashColor: Colors.transparent, ",
 "              highlightColor: Colors.transparent, ",
 "              icon: Icon( ",
 "                icon, ",
 "                size: 25, ",
 "                color: selected ? selectedColor : defaultColor, ",
 "              ), ",
 "            ), ",
 "          ], ",
 "        ); ",
 "      } ",
 "    } ",
    
 
 ],
   
   "description": "bottom navbar 5 curved"
},



"bottom navbar 6 simple" : {
  "prefix": "-bottom navbar 6 simple",
  "scope": "dart",
   "body": [
 
 
" class BottomNavBarFb5 extends StatelessWidget { ",
"   const BottomNavBarFb5({Key? key}) : super(key: key); ",
"  ",
"   final primaryColor = const Color(0xff4338CA); ",
"   final secondaryColor = const Color(0xff6D28D9); ",
"   final accentColor = const Color(0xffffffff); ",
"   final backgroundColor = const Color(0xffffffff); ",
"   final errorColor = const Color(0xffEF4444); ",
"  ",
"   @override ",
"   Widget build(BuildContext context) { ",
"     return Container( ",
"       decoration: const BoxDecoration( ",
"         gradient: ",
"             LinearGradient(colors: [Color(0xff4338CA), Color(0xff6D28D9)]),  ",
"       ), ",
"       child: BottomAppBar( ",
"         elevation: 0, ",
"         color: Colors.transparent, ",
"         child: SizedBox( ",
"           height: 56, ",
"           width: MediaQuery.of(context).size.width, ",
"           child: Padding( ",
"             padding: const EdgeInsets.only(left: 25.0, right: 25.0), ",
"             child: Row( ",
"               mainAxisAlignment: MainAxisAlignment.spaceBetween, ",
"               crossAxisAlignment: CrossAxisAlignment.start, ",
"               children: [ ",
"                 IconBottomBar( ",
"                     text: 'Home', ",
"                     icon: Icons.home, ",
"                     selected: true, ",
"                     onPressed: () {}), ",
"                 IconBottomBar( ",
"                     text: 'Search', ",
"                     icon: Icons.search_outlined, ",
"                     selected: false, ",
"                     onPressed: () {}), ",
"                 IconBottomBar( ",
"                     text: 'Add', ",
"                     icon: Icons.add_to_photos_outlined, ",
"                     selected: false, ",
"                     onPressed: () {}), ",
"                 IconBottomBar( ",
"                     text: 'Cart', ",
"                     icon: Icons.local_grocery_store_outlined, ",
"                     selected: false, ",
"                     onPressed: () {}), ",
"                 IconBottomBar( ",
"                     text: 'Calendar', ",
"                     icon: Icons.date_range_outlined, ",
"                     selected: false, ",
"                     onPressed: () {}) ",
"               ], ",
"             ), ",
"           ), ",
"         ), ",
"       ), ",
"     ); ",
"   } ",
" } ",
"  ",
" class IconBottomBar extends StatelessWidget { ",
"   const IconBottomBar( ",
"       {Key? key, ",
"       required this.text, ",
"       required this.icon, ",
"       required this.selected, ",
"       required this.onPressed}) ",
"       : super(key: key); ",
"   final String text; ",
"   final IconData icon; ",
"   final bool selected; ",
"   final Function() onPressed; ",
"  ",
"   final primaryColor = const Color(0xff4338CA); ",
"   final accentColor = const Color(0xffffffff); ",
"  ",
"   @override ",
"   Widget build(BuildContext context) { ",
"     return Column( ",
"       mainAxisAlignment: MainAxisAlignment.center, ",
"       children: [ ",
"         IconButton( ",
"           onPressed: onPressed, ",
"           icon: ",
"               Icon(icon, size: 25, color: selected ? accentColor : Colors.grey),  ",
"         ), ",
"         Text( ",
"           text, ",
"           style: TextStyle( ",
"               fontSize: 12, ",
"               height: .1, ",
"               color: selected ? accentColor : Colors.grey), ",
"         ) ",
"       ], ",
"     ); ",
"   } ",
" } ",

 ],
   
   "description": "bottom navbar 6 simple"
},









  // 3 

    "Tab Controller" : {
       "prefix": "-Tab Controller",
       "scope": "dart",
        "body": [
        "    /* Its Take A Child   */ ",
        "    DefaultTabController(    ",
        "    length: 3,   ",
        "    initialIndex: 1,   ",
        "    animationDuration: Duration(milliseconds: 1000),      ",
        "    child: Column(      ",
        "      children: const [      ",
        "        TabBar(tabs: [      ",
        "          Tab(      ",
        "            icon: Icon(Icons.home_filled),      ",
        "            text: 'tab_1',      ",
        "            iconMargin: EdgeInsets.all(1),      ",
        "          ),      ",
        "          Tab(      ",
        "            icon: Icon(Icons.phone),      ",
        "          ),      ",
        "          Tab(      ",
        "            icon: Icon(Icons.sms),      ",
        "          ),      ",
        "        ]),      ",
        "        Expanded(      ",
        "          child: TabBarView(      ",
        "            children: [      ",
        "              Center(child: Text('tab1')),      ",
        "              Center(child: Text('tab2')),      ",
        "              Center(child: Text('tab3')),      ",
        "            ],      ",
        "          ),      ",
        "        ),      ",
        "      ],      ",
        "    ),      ",
        "  ),      ",
      
      ],
        
        "description": "Tab Controller"
    },


    "Tab Controller 2 cupertino" : {
      "prefix": "-Tab Controller 2 cupertino",
      "scope": "dart",
       "body": [

       "    /* Its Take A Child   */ ",
"       Column( ",
"      children: [  ",
"        /* Or Wrap With CupertinoSlidingSegmentedControl if need or uncomment bottom type 2*/  ",
"        CupertinoSegmentedControl( ",
"            children: { ",
"              'flutter_Val': const Text(' flutter '), ",
"              'Php_Val': const Text(' Php '), ",
"              'Python_Val': Container( ",
"                color: _getValue == 'Python Val' ",
"                    ? const Color.fromARGB(255, 233, 245, 61).withOpacity(0.8) ",
"                    : Colors.white.withOpacity(0), ",
"                width: double.infinity, ",
"                child: const Text(' Python '), ",
"              ), ",
"            }, ",
"            onValueChanged: (String value) { ",
"              setState(() { ",
"                /* make a var OR Paste on Override method:  var _getValue; */ ",
"                _getValue = value; ",
"              }); ",
"            }), ",
"        _getValue != null ",
"            ? Text('$_getValue is Choose') ",
"            : const Text('Nothing Choose'), ",
"      ], ",
"    ); ",
" ",
"   ",
"    /* type 2 */ ",
"     /* ",
" CupertinoSlidingSegmentedControl( ",
"            children: const { ",
"              1: Text(' flutter '), ",
"              2: Text(' Php '), ",
"              3: Text(' Python '), ",
"            }, ",
"            groupValue: _getint, ",
"            onValueChanged: (value) { ",
"              setState(() { ",
"                /* make a var OR Paste on Override method:  var _getint; */ ",
"                _getint = value; ",
"              }); ",
"            }), ",
"        _getint != null ",
"            ? Text('$_getint is Choose') ",
"            : const Text('Nothing Choose'), ",
"     */ ",
     
     ],
       
       "description": "Tab Controller 2 cupertino"
   },







  // 4  

    "Sliver AppBar " : {
       "prefix": "-sliverappbar",
       "scope": "dart",
        "body": [
        "    /* Place into the body */ ",
      "   body: CustomScrollView(   ",
      "   slivers: [  ",
      "     SliverAppBar.medium(  ",
      "       leading: Icon(Icons.sort),  ",
      "       title: Text('title'), ",
      "       centerTitle: true, ",
      "       actions: [ ",
      "         Icon(Icons.search_outlined), ",
      "         Icon(Icons.send_and_archive_outlined), ",
      "       ], ",
      "     ), ",
      "     SliverToBoxAdapter(  ",
      "       child: Container( ",
      "         height: 1100, ",
      "         color: Color.amber, ",
      "         child: Center(child: Text('text')),     ",
      "       ),    ",
      "     ),    ",
      "   ],    ",
      " ),    ",
      
      ],
        
        "description": "Large Medium AppBar"
    },










  // 5  

    "Drawer Call button" : {
       "prefix": "-drawer call globaly",
       "scope": "dart",
        "body": [
     "    /* its Take A Child PLace Any Where */ ",
     "    Builder(builder: (context) {  ",
     "       /* plz make sure this is required in sacaffold ",
     "          bottom commited => */ ",
     "         // drawer: Drawer(),  ",
     "         return IconButton( ",
     "           icon: Icon(Icons.sort_outlined),  ",
     "           onPressed: (() { ",
     "             Scaffold.of(context).openDrawer();     ",
     "           }),    ",
     "         );    ",
     "       }),    ",
      
      ],
        
        "description": "Open Drawer Globely Paste Any Where"
    },











  // 6  

    "get state managements" : {
       "prefix": "-getstate",
       "scope": "dart",
        "body": [
     "   /* Page 2 _________________ ",
     "     simple class extends by GetxController its required */ ",
     "     class ${1:classcname} extends GetxController {       ",
     "       /* required .obs with var name */       ",
     "       int number  = 100.obs;       ",
     "            ",
     "       callonbtntap() {       ",
     "         number += 1;       ",
     "       }       ",
     "     }       ",
     "            ",
     "     /* page 1________________        ",
     "      its take GetMaterialApp required  */       ",
     "              ",
     "       /* create a variables on override */       ",
     "       /* 1. put here name of class to call state managements by anyvarname */ ",
     "         final ${1:classcname} anyvarnametocall = Get.put(${1:classcname}());",
     "       /* 2. find class name and call by varname to see states */",
     "         ${1:classcname} varname = Get.find<${1:classcname}>();",
     "     ",
     "     /* on pressed button call var of put */",
     "     anyvarnametocall.callonbtntap();",
     "     /* here to see use obx((){}) required */",
     "       Obx(() => Text( ",
     "                 'value added see here ${varname.number.toString()}'",
     "                )), ",
     "         ",
      ],
        
        "description": "Get State Managment Example"
    },














  // 7  

    "getx Form validation" : {
       "prefix": "-formvalidationgetx",
       "scope": "dart",
        "body": [
   
     "      /*   ",
     "      make a controller Or",
     "      Paste It In Variables______________ ",
     "      ",
     "        var emailtextinputcontroller = TextEditingController();  ",
     "        var phontextinputcontroller = TextEditingController(); ",
     "        var nametextinputcontroller = TextEditingController(); ",
     "        var passwordtextinputcontroller = TextEditingController(); ",
     "        bool hideshow = true; ",
     "      ",
     "      */ ",
     "      ",
     "      ",
     "       Column( ",
     "       children: [  ",
     "         Center( ",
     "           child: RichText( ",
     "             text: TextSpan( ",
     "                 text: 'Form', ",
     "                 style: TextStyle(fontSize: 35, color: Colors.cyan),  ",
     "                 children: [  ",
     "                   TextSpan( ",
     "                     text: 'with ', ",
     "                     style: TextStyle(fontSize: 14, color: Colors.blueGrey),             ",
     "                   ),            ",
     "                   TextSpan(            ",
     "                     text: 'V',            ",
     "                     style: TextStyle(fontSize: 28, color: Colors.red),            ",
     "                   ),            ",
     "                   TextSpan(            ",
     "                     text: 'a',            ",
     "                     style: TextStyle(            ",
     "                         fontSize: 18,            ",
     "                         color: Color.fromARGB(255, 238, 127, 255)),            ",
     "                   ),            ",
     "                   TextSpan(            ",
     "                     text: 'l',            ",
     "                     style: TextStyle(            ",
     "                         fontSize: 24,            ",
     "                         color: Color.fromARGB(255, 93, 12, 97)),            ",
     "                   ),            ",
     "                   TextSpan(            ",
     "                     text: 'i',            ",
     "                     style: TextStyle(            ",
     "                         fontSize: 19,            ",
     "                         color: Color.fromARGB(255, 194, 90, 0)),            ",
     "                   ),            ",
     "                   TextSpan(            ",
     "                     text: 'Dation',            ",
     "                     style: TextStyle(            ",
     "                         fontSize: 30,            ",
     "                         color: Color.fromARGB(255, 72, 72, 212)),            ",
     "                   ),            ",
     "                 ]),            ",
     "           ),            ",
     "         ),            ",
     "         // for space            ",
     "         Divider(),            ",
     "         TextFormField(            ",
     "           controller: emailtextinputcontroller,            ",
     "           autovalidateMode: AutovalidateMode.onUserInteraction,            ",
     "                  ",
     "           decoration: InputDecoration(            ",
     "               prefixIcon: Icon(Icons.email_outlined),            ",
     "               suffixIcon: IconButton(            ",
     "                 onPressed: (() {            ",
     "                   emailtextinputcontroller.clear();            ",
     "                 }),            ",
     "                 icon: Icon(Icons.clear),            ",
     "               ),            ",
     "               hintText: 'Enter Email Here',            ",
     "               disabledBorder: OutlineInputBorder(            ",
     "                   borderSide: BorderSide(width: 4, color: Colors.blueGrey),            ",
     "                   borderRadius: BorderRadius.circular(5)),            ",
     "               border: OutlineInputBorder(            ",
     "                 borderRadius: BorderRadius.circular(7),            ",
     "                 borderSide: BorderSide(width: 1),            ",
     "               ),            ",
     "               errorBorder: OutlineInputBorder(            ",
     "                   borderSide: BorderSide(width: 2, color: Colors.red),            ",
     "                   borderRadius: BorderRadius.circular(13)),            ",
     "               label: Text('Email')),            ",
     "           // textAlign: TextAlign.center,            ",
     "           validator: (value) {            ",
     "             // if without Getx Then => if(value.isEmpty)            ",
     "             if (!GetUtils.isLengthGreaterThan(value, 5)) {            ",
     "               return 'min 5 character';            ",
     "             } else if (!GetUtils.isEmail(value!)) {            ",
     "               return 'email is't Correct';            ",
     "             } else {            ",
     "               return null;            ",
     "             }            ",
     "           },            ",
     "         ),            ",
     "         SizedBox(            ",
     "           height: 4,            ",
     "         ),            ",
     "         TextFormField(            ",
     "           controller: phontextinputcontroller,            ",
     "           autovalidateMode: AutovalidateMode.onUserInteraction,            ",
     "           keyboardType: TextInputType.number,            ",
     "           inputFormatters: [FilteringTextInputFormatter.digitsOnly],            ",
     "           decoration: InputDecoration(            ",
     "               prefixIcon: Icon(Icons.phone),            ",
     "               hintText: 'Enter Phone No',            ",
     "               label: Text('Phone')),            ",
     "           textAlign: TextAlign.center,            ",
     "           validator: (value) {            ",
     "             if (!GetUtils.isLengthGreaterThan(value, 5)) {            ",
     "               return 'required Correct Phone No!';            ",
     "             } else {            ",
     "               return null;            ",
     "             }            ",
     "           },            ",
     "         ),            ",
     "         SizedBox(            ",
     "           height: 4,            ",
     "         ),            ",
     "         SizedBox(            ",
     "           height: 4,            ",
     "         ),            ",
     "         TextFormField(            ",
     "           controller: nametextinputcontroller,            ",
     "           autovalidateMode: AutovalidateMode.onUserInteraction,            ",
     "           decoration: InputDecoration(            ",
     "               prefixIcon: Icon(Icons.person_outline),            ",
     "               hintText: 'Enter Name here',            ",
     "               label: Text('Name')),            ",
     "           textAlign: TextAlign.center,            ",
     "           validator: (value) {            ",
     "             if (!GetUtils.isLengthGreaterThan(value, 5)) {            ",
     "               return 'min 5 character';            ",
     "               // return okinputisvalid = true;            ",
     "             } else {            ",
     "               return null;            ",
     "             }            ",
     "           },            ",
     "         ),            ",
     "         SizedBox(            ",
     "           height: 4,            ",
     "         ),            ",
     "         TextFormField(            ",
     "           obscureText: hideshow,            ",
     "           controller: passwordtextinputcontroller,            ",
     "           autovalidateMode: AutovalidateMode.onUserInteraction,            ",
     "           decoration: InputDecoration(            ",
     "             prefixIcon: Icon(Icons.password_outlined),            ",
     "             hintText: 'Enter Password here',            ",
     "             label: Text(            ",
     "               'Password',            ",
     "             ),            ",
     "             suffix: IconButton(            ",
     "               icon: Icon(hideshow            ",
     "                   ? Icons.remove_red_eye_rounded            ",
     "                   : Icons.remove_red_eye_outlined),            ",
     "               onPressed: () {            ",
     "                 setState(() {            ",
     "                   hideshow = !hideshow;            ",
     "                 });            ",
     "               },            ",
     "             ),            ",
     "           ),            ",
     "           textAlign: TextAlign.center,            ",
     "           validator: (value) {            ",
     "             if (!GetUtils.isLengthGreaterThan(value, 8)) {            ",
     "               return 'min 8 character';            ",
     "             } else {            ",
     "               return null;            ",
     "             }            ",
     "           },            ",
     "         ),            ",
     "         SizedBox(height: 16),            ",
     "         Row(            ",
     "           mainAxisAlignment: MainAxisAlignment.spaceBetween,            ",
     "           children: [            ",
     "             TextButton(            ",
     "                 onPressed: () {},            ",
     "                 child: Row(            ",
     "                   children: [            ",
     "                     Icon(Icons.arrow_back),            ",
     "                     Text(            ",
     "                       'signup',            ",
     "                       style: TextStyle(shadows: [            ",
     "                         Shadow(            ",
     "                           color: Colors.grey,            ",
     "                           offset: Offset(2, 2),            ",
     "                           blurRadius: 2,            ",
     "                         )            ",
     "                       ], fontStyle: FontStyle.italic, fontSize: 28),            ",
     "                     )            ",
     "                   ],            ",
     "                 )),            ",
     "             ElevatedButton(            ",
     "                 onPressed: () {            ",
     "                   print(emailtextinputcontroller);            ",
     "                   print(phontextinputcontroller);            ",
     "                   print(nametextinputcontroller);            ",
     "                   print(passwordtextinputcontroller);            ",
     "                 },            ",
     "                 child: Text('Login')),            ",
     "           ],            ",
     "         )            ",
     "       ],            ",
     "      ),            ",
      ],
        
        "description": "form validation by getx Example"
    },









  // 8  

  "future builder" : {
    "prefix": "-futurebuilder",
    "scope": "dart",
     "body": [
    " /* paste on  override ",
    " here exmple data list by future */ ",
    "  Future functionname() async { ",
    "    var ${1:dynamicname} = [ ",
    "      'hi', ",
    "      'hy', ",
    "      'hello', ",
    "      'welcome', ",
    "      'nicetomeetyou', ",
    "    ]; ",
    "    return ${1:dynamicname}; ",
    "  } ",
    "   ",
    "  /* its take a child:   */ ",
    "           FutureBuilder( ",
    "                  future: functionname(),  ",
    "                  builder: (context, snapshot) {   ",
    "                    if (snapshot.hasData) {  ",
    "                      return Expanded( ",
    "                        child: PageView.builder( ",
    "                            scrollDirection: Axis.vertical,  ",
    "                            itemCount: snapshot.data.length, ",
    "                            itemBuilder: (context, index) { ",
    "                              return Center( ",
    "                                child: Text(snapshot.data[index]),      ",
    "                              );     ",
    "                            }),     ",
    "                      );     ",
    "                    } else {     ",
    "                      return Center(     ",
    "                        child: CircularProgressIndicator(),     ",
    "                      );     ",
    "                    }     ",
    "                  }),     ",
   ],
     
     "description": "future builder with page builder example"
 },












  // 9  

  "PopupMenuButton" : {
    "prefix": "-popupmenubutton",
    "scope": "dart",
     "body": [
   
    "  /* its take a child:   */ ",
 "   PopupMenuButton( ",
 "   shape: BeveledRectangleBorder( ",
 "       borderRadius: BorderRadius.circular(10), ",
 "       side: BorderSide( ",
 "           color: Color.fromARGB(255, 255, 121, 64), ",
 "           width: 1,",
 "           strokeAlign: StrokeAlign.inside)),",
 "   initialValue: 23,",
 "   elevation: 40,",
 "   splashRadius: 22,",
 "   onCanceled: () {",
 "     print('canceled');",
 "   },",
 "   onSelected: (value) {",
 "     print(value);",
 "   },",
 "   position: PopupMenuPosition.over,",
 "   itemBuilder: (BuildContext context) {",
 "     return [",
 "       PopupMenuItem(",
 "         onTap: null,",
 "         value: 1,",
 "         child: Text('item 1'),",
 "       ),",
 "       PopupMenuItem(",
 "         onTap: () {",
 "           print('menu item clicked');",
 "         },",
 "         value: 2,",
 "         child: Text('item 2'),",
 "       ),",
 "     ];",
 "   }),  ",
   ],
     
     "description": "popup menu button example"
 },







  // 10  

  "DropdownButton" : {
    "prefix": "-dropdownButton",
    "scope": "dart",
     "body": [
   
    "  /* its take a child:   */ ",
 "   DropdownButton( ",
 "   borderRadius: BorderRadius.circular(10),  ",
 "   hint: Text('choose'), ",
 "   elevation: 70, ",
 "   // value: 1, ",
 "   dropdownColor: Color.fromRGBO(139, 255, 253, 0.49),  ",
 "   onChanged: (value) { ",
 "     print('dropdown open have action: $value'); ",
 "   }, ",
 "   items: [ ",
 "     DropdownMenuItem( ",
 "       child: Text('item 1'), ",
 "       alignment: AlignmentDirectional(0.4, 0.2), ",
 "       value: 1, ",
 "       onTap: () { ",
 "         print('item 1'); ",
 "       }, ",
 "     ), ",
 "     DropdownMenuItem( ",
 "       child: Text('item 2'), ",
 "       value: 2, ",
 "       onTap: () { ",
 "         print('item 2 clicked'); ",
 "       }, ",
 "     ), ",
 "   ], ",
 "  ), ",

   ],
     
     "description": "Dropdown Button example"
 },







  // 11  

  "dragable widget" : {
    "prefix": "-dragablewidget",
    "scope": "dart",
     "body": [
   
   "/* make a variable with offset     ",
   " or paste it on override */ ",
   " Offset offsetvar = const Offset(90, 60);     ",
   " /* need child */    ",
   "    Expanded(    ",
   "              child: LayoutBuilder(builder: (context, constraints) {  ",
   "                return Stack( ",
   "                  children: [ ",
   "                    Positioned( ",
   "                      left: offsetvar.dx, ",
   "                      top: offsetvar.dy, ",
   "                      child: LongPressDraggable( ",
   "                        feedback: Container( ",
   "                          child: Text('show during drags'), ",
   "                          height: 100, ",
   "                          color: Colors.indigo, ",
   "                        ), ",
   "                        child: Container( ",
   "                          height: 150, ",
   "                          /* can show any things like  imgs others etc */",
   "                          child: Text('show front'), ",
   "                          color: Colors.indigoAccent, ",
   "                        ), ",
   "                        onDragEnd: (details) { ",
   "                          setState(() { ",
   "                            double adj = MediaQuery.of(context).size.height -       ",
   "                                constraints.maxHeight;      ",
   "                            offsetvar = Offset(      ",
   "                                details.offset.dx, details.offset.dy - adj);      ",
   "                          });      ",
   "                        },      ",
   "                      ),      ",
   "                    ),      ",
   "                  ],      ",
   "                );      ",
   "              }),      ",
   "            ),      ",

   ],
     
     "description": "dragable widget example"
 },









  // 12  

  "drag drop widget" : {
    "prefix": "-dragdropwidget",
    "scope": "dart",
     "body": [
   "   /* make a color var  ",
   "   or paste it on override */ ",
   "   Color catchcolorvar = Color.fromARGB(255, 255, 143, 180); ",
   "  /* need child */ ",
   "        Column( ",
   "          mainAxisAlignment: MainAxisAlignment.spaceBetween,  ",
   "          crossAxisAlignment: CrossAxisAlignment.center, ",
   "          children: [ ",
   "            Draggable( ",
   "                data: Colors.pink, ",
   "                onDraggableCanceled: (velocity, offset) {}, ",
   "                child: Container( ",
   "                  color: Colors.blue, ",
   "                  width: 120, ",
   "                  height: 150, ",
   "                  child: Center( ",
   "                    child: Text('its dragable'), ",
   "                  ), ",
   "                ), ",
   "                feedback: Container( ",
   "                  color: Colors.yellow, ",
   "                  height: 50, ",
   "                  width: 50, ",
   "                  child: Center( ",
   "                    child: Text('holded'), ",
   "                  ), ",
   "                )), ",
   "            DragTarget( ",
   "              onAccept: (Color color) { ",
   "                catchcolorvar = color; ",
   "              }, ",
   "              builder: ( ",
   "                BuildContext context, ",
   "                List<dynamic> accepted, ",
   "                List<dynamic> rejected, ",
   "              ) { ",
   "                return Container( ",
   "                  color: accepted.isEmpty ? catchcolorvar : Colors.green,      ",
   "                  height: 80,     ",
   "                  width: 80,     ",
   "                  child: Text('where drags'),     ",
   "                );     ",
   "              },     ",
   "            ),     ",
   "          ],     ",
   "        ),     ",
   ],
     
     "description": "drag drop widget example"
 },


















  // 13  

  "ReorderableListView" : {
    "prefix": "-ReorderableListView",
    "scope": "dart",
     "body": [
  "   /* make a list generater ",
  "      or paste it on override */ ",
  "      final List<int> items = List<int>.generate(15, ((int index) => index)); ",
  "   /* need child */ ",
  "                 Expanded( ",
  "                 child: ReorderableListView( ",
  "                   children: List.generate( ",
  "                     items.length, ",
  "                     (index) => ListTile( ",
  "                       key: Key('$index'), ",
  "                       leading: Icon(Icons.person),  ",
  "                       tileColor: ",
  "                           items[index].isOdd ? Colors.lime : Colors.cyanAccent,     ",
  "                       title: Text(items is ${items[index]}'),    ",
  "                       trailing: Icon(Icons.drag_handle),    ",
  "                     ),    ",
  "                   ),    ",
  "                   onReorder: (int oldindex, int newIndex) {    ",
  "                     setState(() {    ",
  "                       if (oldindex < newIndex) {    ",
  "                         newIndex -= 1;    ",
  "                       }    ",
  "                       // delete old index loc    ",
  "                       int itemindex = items.removeAt(oldindex);    ",
  "                       // set new loc by index    ",
  "                       items.insert(newIndex, itemindex);    ",
  "                     });    ",
  "                   },    ",
  "                 ),    ",
  "               ),    ",
   ],
     
     "description": "Reorder Able ListView example"
 },













  // 14  

  "autosearch text" : {
    "prefix": "-autosearch",
    "scope": "dart",
     "body": [
  "  /* make a list with defin string ",
  "   or paste it on override method */ ",
  "   final List<String> ${1:dynamicname} = <String>[  ",
  "    'apple', ",
  "    'banana', ",
  "    'mango', ",
  "  ]; ",
  " /* need child */ ",
  "     Autocomplete( ",
  "               ",
  "              optionsBuilder: (TextEditingValue getedval) {  ",
  "                if (getedval.text == '') { ",
  "                  return Iterable<String>.empty(); ",
  "                } ",
  "                return ${1:dynamicname}.where((String item) { ",
  "                  return item.contains(getedval.text.toLowerCase());      ",
  "                });     ",
  "              },     ",
  "              onSelected: (String item) {     ",
  "                print('this item is selected $item');     ",
  "              },     ",
  "            ),     ",
   ],
     
     "description": "auto search text ListView example"
 },












  // 15  

  "ErrorWidget text" : {
    "prefix": "-errorwidget",
    "scope": "dart",
     "body": [
 "   /*  place it above runn app */ ",
 "   ErrorWidget.builder = (FlutterErrorDetails getdetails) {         ",
 "     bool vdebug = false;        ",
 "     assert(() {        ",
 "       vdebug = true;        ",
 "       return true;        ",
 "     }());        ",
 "         ",
 "     if (vdebug) {        ",
 "       return ListTile(        ",
 "         leading: Icon(Icons.nearby_error),        ",
 "         title: Text('All Errors Here'),        ",
 "         subtitle: Text('Error/n ${getdetails.exception}'),        ",
 "         trailing: Icon(Icons.remove_red_eye_outlined),        ",
 "       );        ",
 "     }        ",
 "     return ElevatedButton(        ",
 "         onPressed: () {        ",
 "           vdebug = !vdebug;        ",
 "         },        ",
 "         child: Icon(Icons.remove_red_eye));        ",
 "   };        ",
   ],
     
     "description": "Error Widget example"
 },










  // 16  

  "form validation" : {
    "prefix": "-formvalidation",
    "scope": "dart",
     "body": [
 " /*     make a globel key of form key ",
 "     or paste it on override method  */ ",
 "     final keyforcheck = GlobalKey<FormState>();    ",
 "     /* need child */    ",
 "    Form(    ",
 "              key: keyforcheck,    ",
 "              child: Column(    ",
 "                children: [    ",
 "                  TextFormField(    ",
 "                    decoration: InputDecoration(    ",
 "                      hintText: 'Enter Name',    ",
 "                      label: Text('Name'),    ",
 "                    ),    ",
 "                    validator: (value) {    ",
 "                      if (value == '') {    ",
 "                        return 'plz fill Name fields';  ",
 "                      } ",
 "                      return null; ",
 "                    }, ",
 "                  ), ",
 "                  SizedBox( ",
 "                    height: 10, ",
 "                  ), ",
 "                  TextFormField( ",
 "                    decoration: InputDecoration(hintText: 'Enter Adress'),     ",
 "                    validator: (value) {    ",
 "                      if (value == '') {    ",
 "                        return 'plz fill Adress fields';    ",
 "                      }    ",
 "                      return null;    ",
 "                    },    ",
 "                  ),    ",
 "                  ElevatedButton(    ",
 "                      onPressed: () {    ",
 "                        if (keyforcheck.currentState!.validate()) {}    ",
 "                      },    ",
 "                      child: Text('check validate')),    ",
 "                ],    ",
 "              ),    ",
 "            ),    ",
   ],
     
     "description": "form validation with button"
 },












  // 17  

  "CupertinoContextMenu" : {
    "prefix": "-CupertinoContextMenu",
    "scope": "dart",
     "body": [
  "   /* need child  */ ",
  "  CupertinoContextMenu( ",
  "  child: Icon(Icons.fact_check_sharp), ",
  "  actions: [ ",
  "    ElevatedButton( ",
  "        onPressed: () {}, ",
  "        child: Icon(Icons.check_circle_outline_rounded)), ",
  "    ElevatedButton(onPressed: () {}, child: Icon(Icons.cancel)),  ",
  "  ],  ",
  "  ), ",
   ],
     
     "description": "Cupertino Menu button"
 },









  // 18  

  "dataclass" : {
    "prefix": "-dataclass",
    "scope": "dart",
     "body": [

   "   class ${1:dynamicname} {    ",
   "     final String name;  ",
   "     final String desc;  ",
   "     final String img;  ",
   "     ",
   "     ${1:dynamicname}({  ",
   "       required this.name,  ",
   "       required this.desc,  ",
   "       required this.img,  ",
   "     });  ",
   "     ",
   "     static List<${1:dynamicname}> list = [  ",
   "       ${1:dynamicname}(  ",
   "         name: 'name1',  ",
   "         desc: 'desc 1',  ",
   "         img: 'img1.jpg',  ",
   "       ),  ",
   "       ${1:dynamicname}(  ",
   "         name: 'img2',  ",
   "         desc: 'desc 2',  ",
   "         img: 'img2.jpg',  ",
   "       ),  ",
   "     ];  ",
   "   }  ",
      
   ],
     
     "description": "generate data class Object"
 },











  // 19  

  "materialbody" : {
    "prefix": "-materialappbody",
    "scope": "dart",
     "body": [

  "    MaterialApp( ",
  "    title: '${1:title}', ",
  "    theme: themeval ",
  "        ? ThemeData( ",
  "            brightness: Brightness.dark, ",
  "            /* choose own color */ ",
  "            primarySwatch: Colors.orange, ",
  "            appBarTheme: const AppBarTheme( ",
  "              color: Colors.orange, ",
  "            ), ",
  "          ) ",
  "        : ThemeData( ",
  "            brightness: Brightness.light, ",
  "            /* choose own color */ ",
  "            primarySwatch: Colors.cyan, ",
  "          ), ",
  "    // debugShowMaterialGrid: true, ",
  "    debugShowCheckedModeBanner: false, ",
  "    home: Scaffold( ",
  "      drawer: Drawer(), ",
  "      appBar: AppBar( ", 
  "        title: Text('${2:appbartitle}'), ",
  "        leading: Builder(builder: (context) { ",
  "          return IconButton( ",
  "            icon: Icon(Icons.sort), ",
  "            onPressed: () { ",
  "              Scaffold.of(context).openDrawer();  ",
  "            }, ",
  "          ); ",
  "        }), ",
  "        actions: [ ",
  "          IconButton( ",
  "              onPressed: () { ",
  "                setState(() { ",
  "                  themeval = !themeval; ",
  "                }); ",
  "              }, ",
  "              icon: Icon(themeval ",
  "                  ? Icons.light_mode_outlined  ",
  "                  : Icons.dark_mode_outlined)), ",
  "        ], ",
  "      ), ",
  "      body: Container( ",
  "        ",
  "      ), ",
  "    ), ",
  "  ); ",
      
   ],
     
     "description": "generate material body"
 },











  // 20. all cards  

  "feature cards" : {
    "prefix": "-card 1 features",
    "scope": "dart",
     "body": [


 "     class SocialPictureGroup extends StatelessWidget { ",
 "       const SocialPictureGroup({ ",
 "         Key? key, ",
 "         required this.imgUrl, ",
 "         required this.title, ",
 "         required this.color, ",
 "         required this.onTap, ",
 "         this.width = 400, ",
 "       }) : super(key: key); ",
 "        ",
 "       final String imgUrl; ",
 "       final String title; ",
 "       final Color color; ",
 "       final Function onTap; ",
 "       final double width; ",
 "       @override ",
 "       Widget build(BuildContext context) { ",
 "         return Column( ",
 "             crossAxisAlignment: CrossAxisAlignment.start, ",
 "             children: [ ",
 "               InkWell( ",
 "                 onTap: () { ",
 "                   onTap(); ",
 "                 }, ",
 "                 child: Column( ",
 "                   crossAxisAlignment: CrossAxisAlignment.start, ",
 "                   children: [ ",
 "                     Container( ",
 "                       width: width, ",
 "                       child: Image.network( ",
 "                         imgUrl, ",
 "                         fit: BoxFit.fitWidth, ",
 "                       ), ",
 "                       decoration: BoxDecoration( ",
 "                         borderRadius: BorderRadius.all(Radius.circular(22)), ",
 "                         // color: Colors.red ",
 "                       ), ",
 "                       clipBehavior: Clip.antiAlias, ",
 "                     ), ",
 "                     SizedBox( ",
 "                       height: 10, ",
 "                     ), ",
 "                     Text( ",
 "                       title, ",
 "                       style: TextStyle(fontSize: 30, fontWeight: FontWeight.bold), ",
 "                     ), ",
 "                   ], ",
 "                 ), ",
 "               ), ",
 "               SizedBox( ",
 "                 height: 10, ",
 "               ), ",
 "               Container( width: width, child: LikeListTile(title: 'Andre Hirata', likes: '130', subtitle: '103 Reviews', color: color,))  ",
 "             ], ",
 "         ); ",
 "       } ",
 "     } ",
 "      ",
 "     class LikeListTile extends StatelessWidget { ",
 "       const LikeListTile( ",
 "           {Key? key, ",
 "           required this.title, ",
 "           required this.likes, ",
 "           required this.subtitle, ",
 "           this.color = Colors.grey}) ",
 "           : super(key: key); ",
 "       final String title; ",
 "       final String likes; ",
 "       final String subtitle; ",
 "       final Color color; ",
 "       @override ",
 "       Widget build(BuildContext context) { ",
 "         return ListTile( ",
 "           contentPadding: EdgeInsets.all(0), ",
 "           leading: Container( ",
 "             width: 50, ",
 "             child: AspectRatio( ",
 "               aspectRatio: 1, ",
 "               child: Container( ",
 "                 decoration: BoxDecoration( ",
 "                     shape: BoxShape.circle, ",
 "                     image: DecorationImage( ",
 "                         image: NetworkImage( ",
 "                             'https://profilemagazine.com/wp-content/uploads/2020/04/Ajmere-Dale-Square-thumbnail.jpg'))), ",
 "               ), ",
 "             ), ",
 "           ), ",
 "           title: Text(title), ",
 "           subtitle: Row( ",
 "             children: [ ",
 "               Icon(Icons.favorite, color: Colors.orange,size:15), ",
 "               SizedBox(width: 2), ",
 "               Text(likes), ",
 "               Container( ",
 "                   decoration: BoxDecoration( ",
 "                     shape: BoxShape.circle, ",
 "                     color: Colors.grey, ",
 "                   ), ",
 "                   child: Padding( ",
 "                     padding: const EdgeInsets.symmetric(horizontal: 10), ",
 "                     child: SizedBox(width: 4, height: 4), ",
 "                   )), ",
 "               Text(subtitle) ",
 "             ], ",
 "           ), ",
 "           trailing: LikeButton(onPressed: () {}, color: Colors.orange), ",
 "         ); ",
 "       } ",
 "     } ",
 "      ",
 "     class LikeButton extends StatefulWidget { ",
 "       const LikeButton( ",
 "           {Key? key, required this.onPressed, this.color = Colors.black12}) ",
 "           : super(key: key); ",
 "       final Function onPressed; ",
 "       final Color color; ",
 "       @override ",
 "       _LikeButtonState createState() => _LikeButtonState(); ",
 "     } ",
 "      ",
 "     class _LikeButtonState extends State<LikeButton> { ",
 "       bool isLiked = false; ",
 "      ",
 "       @override ",
 "       Widget build(BuildContext context) { ",
 "         return Container( ",
 "             child: IconButton( ",
 "           icon: Icon(isLiked ? Icons.favorite : Icons.favorite_border, ",
 "               color: widget.color), ",
 "           onPressed: () { ",
 "             setState(() { ",
 "               isLiked = !isLiked; ",
 "             }); ",
 "             widget.onPressed(); ",
 "           }, ",
 "         )); ",
 "       } ",
 "     } ",
      
   ],
     
     "description": "feature card"
 },




  "square cards" : {
    "prefix": "-card 2 square",
    "scope": "dart",
     "body": [


 "     class CardFb1 extends StatelessWidget { ",
 "       final String text; ",
 "       final String imageUrl; ",
 "       final String subtitle; ",
 "       final Function() onPressed; ",
 "      ",
 "       const CardFb1({required this.text, required this.imageUrl, required this.subtitle, required this.onPressed, Key? key})  ",
 "           : super(key: key); ",
 "      ",
 "       @override ",
 "       Widget build(BuildContext context) { ",
 "         return GestureDetector( ",
 "             onTap: onPressed, ",
 "             child: Container( ",
 "               width: 150, ",
 "               height: 150, ",
 "               padding: const EdgeInsets.all(15.0), ",
 "               decoration: BoxDecoration( ",
 "                 color: Colors.white, ",
 "                 borderRadius: BorderRadius.circular(12.5), ",
 "                 boxShadow: [ ",
 "                   BoxShadow( ",
 "                       offset: const Offset(10, 20), ",
 "                       blurRadius: 10, ",
 "                       spreadRadius: 0, ",
 "                       color: Colors.grey.withOpacity(.05)), ",
 "                 ], ",
 "               ), ",
 "               child: Column( ",
 "                 children: [ ",
 "                   Image.network(imageUrl, height: 59, fit: BoxFit.cover), ",
 "                   const Spacer(), ",
 "                   Text(text, ",
 "                       textAlign: TextAlign.center, ",
 "                       style: const TextStyle( ",
 "                         color: Colors.black, ",
 "                         fontWeight: FontWeight.bold, ",
 "                         fontSize: 18, ",
 "                       )), ",
 "                   const SizedBox( ",
 "                     height: 5, ",
 "                   ), ",
 "                   Text( ",
 "                     subtitle, ",
 "                     textAlign: TextAlign.center, ",
 "                     style: const TextStyle( ",
 "                         color: Colors.grey, ",
 "                         fontWeight: FontWeight.normal, ",
 "                         fontSize: 12), ",
 "                   ), ",
 "                   const SizedBox( ",
 "                     height: 10, ",
 "                   ), ",
 "                 ], ",
 "               ), ",
 "             ), ",
 "         ); ",
 "       } ",
 "     } ",
      
   ],
     
     "description": "square card"
 },






        "informative cards" : {
          "prefix": "-card 3 informative",
          "scope": "dart",
          "body": [


      "     class InfoCard extends StatelessWidget {",
      "       final String title;",
      "       final String body;",
      "       final Function() onMoreTap;",
      "     ",
      "       final String subInfoTitle;",
      "       final String subInfoText;",
      "       final Widget subIcon;",
      "     ",
      "       const InfoCard(",
      "           {required this.title,",
      "           this.body =",
      "               '''Lorem ipsum dolor sit amet consectetur adipisicing elit. Maxime mollitia, molestiae quas vel sint commodi repudi conseqr!''', ",
      "           required this.onMoreTap, ",
      "           this.subIcon = const CircleAvatar( ",
      "             child: Icon( ",
      "               Icons.directions, ",
      "               color: Colors.white, ",
      "             ), ",
      "             backgroundColor: Colors.orange, ",
      "             radius: 25, ",
      "           ), ",
      "           this.subInfoText = '545 miles', ",
      "           this.subInfoTitle = 'Directions', ",
      "           Key? key}) ",
      "           : super(key: key); ",
      "      ",
      "       @override ",
      "       Widget build(BuildContext context) { ",
      "         return Container( ",
      "           padding: EdgeInsets.all(25.0), ",
      "           decoration: BoxDecoration( ",
      "               borderRadius: BorderRadius.circular(25.0), ",
      "               boxShadow: [ ",
      "                 BoxShadow( ",
      "                   color: Colors.black.withOpacity(.05), ",
      "                   offset: Offset(0, 10), ",
      "                   blurRadius: 0, ",
      "                   spreadRadius: 0, ",
      "                 ) ",
      "               ], ",
      "               gradient: RadialGradient( ",
      "                 colors: [Colors.orangeAccent, Colors.orange], ",
      "                 focal: Alignment.topCenter, ",
      "                 radius: .85, ",
      "               )), ",
      "           child: Column( ",
      "             crossAxisAlignment: CrossAxisAlignment.start, ",
      "             mainAxisSize: MainAxisSize.min, ",
      "             children: [ ",
      "               Row( ",
      "                 mainAxisAlignment: MainAxisAlignment.spaceBetween, ",
      "                 children: [ ",
      "                   Text( ",
      "                     title, ",
      "                     style: TextStyle( ",
      "                         color: Colors.white, ",
      "                         fontSize: 26, ",
      "                         fontWeight: FontWeight.bold), ",
      "                   ), ",
      "                   Container( ",
      "                     width: 75, ",
      "                     height: 30, ",
      "                     decoration: BoxDecoration( ",
      "                       borderRadius: BorderRadius.circular(100.0), ",
      "                       gradient: LinearGradient( ",
      "                           colors: [Colors.white, Colors.white], ",
      "                           begin: Alignment.topCenter, ",
      "                           end: Alignment.bottomCenter), ",
      "                     ), ",
      "                     child: GestureDetector( ",
      "                       onTap: onMoreTap, ",
      "                       child: Center( ",
      "                           child: Text( ",
      "                         'More', ",
      "                         style: TextStyle(color: Colors.orange), ",
      "                       )), ",
      "                     ), ",
      "                   ), ",
      "                 ], ",
      "               ), ",
      "               SizedBox(height: 10), ",
      "               Text( ",
      "                 body, ",
      "                 style: ",
      "                     TextStyle(color: Colors.white.withOpacity(.75), fontSize: 14), ",
      "               ), ",
      "               SizedBox(height: 15), ",
      "               Container( ",
      "                 width: double.infinity, ",
      "                 height: 75, ",
      "                 decoration: BoxDecoration( ",
      "                   borderRadius: BorderRadius.circular(25.0), ",
      "                   color: Colors.white, ",
      "                 ), ",
      "                 child: Padding( ",
      "                   padding: const EdgeInsets.all(8.0), ",
      "                   child: Row( ",
      "                     children: [ ",
      "                       subIcon, ",
      "                       SizedBox(width: 10), ",
      "                       Column( ",
      "                         mainAxisAlignment: MainAxisAlignment.center, ",
      "                         crossAxisAlignment: CrossAxisAlignment.start, ",
      "                         children: [ ",
      "                           Text(subInfoTitle), ",
      "                           Text( ",
      "                             subInfoText, ",
      "                             style: TextStyle( ",
      "                               color: Colors.orange, ",
      "                               fontSize: 22, ",
      "                               fontWeight: FontWeight.bold, ",
      "                             ), ",
      "                           ), ",
      "                         ], ",
      "                       ) ",
      "                     ], ",
      "                   ), ",
      "                 ), ",
      "               ) ",
      "             ], ",
      "           ), ",
      "         ); ",
      "       } ",
      "     } ",
            
            
        ],
          
          "description": "informative card"
      },






















      


      "nft cards" : {
        "prefix": "-card 4 nft",
        "scope": "dart",
        "body": [



" class AuctionItem { ",
"   final String name; ",
"   final String username; ",
"   final String description; ",
"   final String imgUrl; ",
"  ",
"   final String time; ",
"   final String price; ",
"  ",
"   AuctionItem( ",
"       {required this.name, ",
"       required this.username, ",
"       required this.description, ",
"       required this.imgUrl, ",
"       required this.time, ",
"       required this.price}); ",
" } ",
"  ",
" List<AuctionItem> auctionItems = [ ",
"   AuctionItem( ",
"       name: 'Purple splash', ",
"       description: ",
"           'This paint was made via the luxurious lorem ipsum celebration. If you are reading this you are amazing.', ",
"       username: '@flutterbricks', ",
"       imgUrl: ",
"           'https://images.unsplash.com/photo-1563089145-599997674d42?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=2340&q=80', ",
"       time: '20h: 35m: 08s', ",
"       price: '15.97 ETH'), ",
"   AuctionItem( ",
"       name: 'Neon Glass', ",
"       description: ",
"           'This paint was made via the luxurious lorem ipsum celebration. If you are reading this you are amazing.', ",
"       username: '@henry', ",
"       imgUrl: ",
"           'https://images.unsplash.com/photo-1544365558-35aa4afcf11f?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1036&q=80',  ",
"       time: '20h: 35m: 08s', ",
"       price: '15.97 ETH'), ",
" ]; ",
"  ",
" // Give a sized box as its parent with width/height. ",
" class CustomCarouselFB2 extends StatefulWidget { ",
"   const CustomCarouselFB2({Key? key}) : super(key: key); ",
"  ",
"   @override ",
"   _CustomCarouselFB2State createState() => _CustomCarouselFB2State(); ",
" } ",
"  ",
" class _CustomCarouselFB2State extends State<CustomCarouselFB2> { ",
"   final double carouselItemMargin = 16; ",
"  ",
"   late PageController _pageController; ",
"  ",
"   @override ",
"   void initState() { ",
"     super.initState(); ",
"     _pageController = PageController(initialPage: 0, viewportFraction: 1); ",
"   } ",
"  ",
"   @override ",
"   Widget build(BuildContext context) { ",
"     return PageView.builder( ",
"         controller: _pageController, ",
"         itemCount: auctionItems.length, ",
"         onPageChanged: (int position) {}, ",
"         itemBuilder: (BuildContext context, int position) { ",
"           return imageSlider(position); ",
"         }); ",
"   } ",
"  ",
"   Widget imageSlider(int position) { ",
"     return AnimatedBuilder( ",
"       animation: _pageController, ",
"       builder: (BuildContext context, widget) { ",
"         return Container( ",
"           margin: EdgeInsets.all(carouselItemMargin), ",
"           child: Center(child: widget), ",
"         ); ",
"       }, ",
"       child: CardFb1(item: auctionItems[position]), ",
"     ); ",
"   } ",
" } ",
"  ",
" class CardFb1 extends StatelessWidget { ",
"   final AuctionItem item; ",
"  ",
"   const CardFb1({required this.item, Key? key}) : super(key: key); ",
"  ",
"   @override ",
"   Widget build(BuildContext context) { ",
"     return GestureDetector( ",
"       onTap: () { ",
"         // Import the NFT Hero for animations ",
"         // Navigator.push( ",
"         //     context, MaterialPageRoute(builder: (_) => NftHero(item: item))); ",
"       }, ",
"       child: Container( ",
"         width: MediaQuery.of(context).size.width / 1, ",
"         padding: const EdgeInsets.all(20.0), ",
"         decoration: BoxDecoration( ",
"           borderRadius: BorderRadius.circular(5.0), ",
"           border: Border.all(color: Colors.grey), ",
"           boxShadow: [ ",
"             BoxShadow( ",
"                 offset: const Offset(10, 20), ",
"                 blurRadius: 10, ",
"                 spreadRadius: 0, ",
"                 color: Colors.grey.withOpacity(.05)), ",
"           ], ",
"         ), ",
"         child: Column( ",
"           children: [ ",
"             Row( ",
"               mainAxisAlignment: MainAxisAlignment.spaceBetween, ",
"               children: [ ",
"                 Text( ",
"                   item.name, ",
"                   style: const TextStyle(color: Colors.white), ",
"                 ), ",
"                 Text( ",
"                   item.username, ",
"                   style: const TextStyle(color: Colors.grey), ",
"                 ) ",
"               ], ",
"             ), ",
"             const SizedBox( ",
"               height: 10.0, ",
"             ), ",
"             Hero( ",
"               tag: item.imgUrl, ",
"               child: Image.network( ",
"                 item.imgUrl, ",
"                 fit: BoxFit.cover, ",
"                 height: MediaQuery.of(context).size.height / 3.75, ",
"               ), ",
"             ), ",
"             const SizedBox( ",
"               height: 25.0, ",
"             ), ",
"             Row( ",
"               mainAxisAlignment: MainAxisAlignment.spaceBetween, ",
"               children: [ ",
"                 Text( ",
"                   item.time, ",
"                   style: const TextStyle( ",
"                       color: Colors.white, ",
"                       fontSize: 16, ",
"                       fontWeight: FontWeight.bold), ",
"                 ), ",
"                 Text( ",
"                   item.price, ",
"                   style: const TextStyle( ",
"                       color: Colors.white, ",
"                       fontSize: 16, ",
"                       fontWeight: FontWeight.bold), ",
"                 ) ",
"               ], ",
"             ), ",
"             Row( ",
"               mainAxisAlignment: MainAxisAlignment.spaceBetween, ",
"               children: const [ ",
"                 Text( ",
"                   'Remaining Time', ",
"                   style: TextStyle( ",
"                       color: Colors.grey, ",
"                       fontSize: 14, ",
"                       fontWeight: FontWeight.w300), ",
"                 ), ",
"                 Text( ",
"                   'Highest Bid', ",
"                   style: TextStyle( ",
"                       color: Colors.grey, ",
"                       fontSize: 14, ",
"                       fontWeight: FontWeight.w300), ",
"                 ) ",
"               ], ",
"             ), ",
"           ], ",
"         ), ",
"       ), ",
"     ); ",
"   } ",
" } ",
          
          
      ],
        
        "description": "nft card"
    },


      


    "card swip cards" : {
      "prefix": "-card swip cards",
      "scope": "dart",
      "body": [

       

 " //- - - - - - - - - Instructions - - - - - - - - - - - - - - - - - - ",
 "  //  ",
 "  // Pass cards to be swiped into the cards parameter. Any Widget can be provided,  ",
 "  // although unexpected behavior may occur with widgets that are especially small or large  ",
 "  // ",
 "  // MUST IMPORT MATH for Pi: import 'dart:math'; ",
 "  // ",
 "  // Coming Soon:  ",
 "  //    - Controller Class for controlling swipecard outside of widget. ",
 "  //    - Buttons that swipe left or right ",
 " ",
 "  //- - - - - - - - - - - - - - -  - - - - - - - - - - - - - - - - - - ",
 " ",
 " ",
 "// -=-=- (Dating App images) -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= ",
 " ",
 "//COPY Paste below code to test functionality with demo images ",
 " ",
 "const List<String> urls = [ ",
 "  'https://images.unsplash.com/photo-1557053910-d9eadeed1c58?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8MXx8d29tYW4lMjBwb3J0cmFpdHxlbnwwfHwwfHw%3D&w=1000&q=80', ",
 "  'https://images.unsplash.com/photo-1561442748-c50715dc32f6?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxjb2xsZWN0aW9uLXBhZ2V8MXw5MjU4MjM3fHxlbnwwfHx8fA%3D%3D&auto=format&fit=crop&w=500&q=60', ",
 "  'https://images.unsplash.com/photo-1589156191108-c762ff4b96ab?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8NXx8YmxhY2slMjB3b21hbiUyMHBvcnRyYWl0fGVufDB8fDB8fA%3D%3D&auto=format&fit=crop&w=500&q=60',   ",
 "  'https://images.unsplash.com/photo-1557053910-d9eadeed1c58?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8MXx8d29tYW4lMjBwb3J0cmFpdHxlbnwwfHwwfHw%3D&w=1000&q=80', ",
 "  'https://images.unsplash.com/photo-1561442748-c50715dc32f6?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxjb2xsZWN0aW9uLXBhZ2V8MXw5MjU4MjM3fHxlbnwwfHx8fA%3D%3D&auto=format&fit=crop&w=500&q=60', ",
 "  'https://images.unsplash.com/photo-1589156191108-c762ff4b96ab?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8NXx8YmxhY2slMjB3b21hbiUyMHBvcnRyYWl0fGVufDB8fDB8fA%3D%3D&auto=format&fit=crop&w=500&q=60' ",
 "]; ",
 " ",
 "List<Widget> cards = urls.map((url) => SwipeImage(url: url)).toList(); ",
 " ",
 "// -=-=--=- (Small Cards) =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= ",
 "// List<Widget> cards = [ ",
 "//   CardFb1( ",
 "//       text: 'Explore', ",
 "//       imageUrl: ",
 "//           'https://firebasestorage.googleapis.com/v0/b/flutterbricks-public.appspot.com/o/illustrations%2Fundraw_Working_late_re_0c3y%201.png?alt=media&token=7b880917-2390-4043-88e5-5d58a9d70555', ",
 "//       subtitle: '+30 books', ",
 "//       onPressed: () {}), ",
 "//   CardFb1( ",
 "//       text: 'Implore', ",
 "//       imageUrl: ",
 "//           'https://firebasestorage.googleapis.com/v0/b/flutterbricks-public.appspot.com/o/illustrations%2Fundraw_Working_late_re_0c3y%201.png?alt=media&token=7b880917-2390-4043-88e5-5d58a9d70555', ",
 "//       subtitle: '+30 books', ",
 "//       onPressed: () {}), ",
 "//   CardFb1( ",
 "//       text: 'Deplore', ",
 "//       imageUrl: ",
 "//           'https://firebasestorage.googleapis.com/v0/b/flutterbricks-public.appspot.com/o/illustrations%2Fundraw_Working_late_re_0c3y%201.png?alt=media&token=7b880917-2390-4043-88e5-5d58a9d70555', ",
 "//       subtitle: '+30 books', ",
 "//       onPressed: () {}), ",
 "//     CardFb1( ",
 "//       text: 'SeaFloor', ",
 "//       imageUrl: ",
 "//           'https://firebasestorage.googleapis.com/v0/b/flutterbricks-public.appspot.com/o/illustrations%2Fundraw_Working_late_re_0c3y%201.png?alt=media&token=7b880917-2390-4043-88e5-5d58a9d70555', ",
 "//       subtitle: '30 books', ",
 "//       onPressed: () {}) ",
 "// ]; ",
 " ",
 "class SwipeImage extends StatelessWidget { ",
 "  final String url; ",
 "  const SwipeImage({Key? key, required this.url}) : super(key: key); ",
 " ",
 "  @override ",
 "  Widget build(BuildContext context) { ",
 "    return Padding( ",
 "      padding: const EdgeInsets.all(8.0), ",
 "      child: ClipRRect( ",
 "          borderRadius: BorderRadius.circular(20), ",
 "          child: Container( ",
 "            decoration: BoxDecoration( ",
 "                image: DecorationImage( ",
 "                    image: NetworkImage(url), ",
 "                    fit: BoxFit.cover, ",
 "                    alignment: Alignment(0.3, 0))), ",
 "          )), ",
 "    ); ",
 "  } ",
 "} ",
 "class SwipeCardsFB extends StatefulWidget { ",
 "  final int cardResetDuration; ",
 "  final double maxTiltAngle; ",
 "  final double sideSwipeSensitivity; ",
 "  final double upSwipeSensitivity; ",
 " ",
 "  final Function onRightSwipe; ",
 "  final Function onLeftSwipe; ",
 "  final Function onUpSwipe; ",
 "  final List<Widget> cards; ",
 "  SwipeCardsFB({ ",
 "    Key? key, ",
 "    required this.cards, ",
 "    required this.onRightSwipe, ",
 "    required this.onLeftSwipe, ",
 "    required this.onUpSwipe, ",
 "    this.cardResetDuration = 400, //milliseconds ",
 "    this.maxTiltAngle = 25, //degrees  ",
 "    this.sideSwipeSensitivity = 100, //distance the user must swipe left or right for action ",
 "    this.upSwipeSensitivity = 50, ",
 "  }) : super(key: key); ",
 "   ",
 "  @override ",
 "  _SwipeCardsFBState createState() => _SwipeCardsFBState(); ",
 "} ",
 " ",
 "class _SwipeCardsFBState extends State<SwipeCardsFB> { ",
 "  Offset _dragPosition = Offset.zero; ",
 "  double _angle = 0; ",
 " ",
 "  Offset get dragPosition => _dragPosition; ",
 " ",
 "  bool _isDragging = false; ",
 "  late Size _screenSize; ",
 " ",
 "  @override ",
 "  Widget build(BuildContext context) { ",
 "    _screenSize = MediaQuery.of(context).size; ",
 "    return Stack( ",
 "        children: cards.map<Widget>((widget) { ",
 "      return widget == cards.last ? buildFrontCard(widget) : buildCard(widget); ",
 "    }).toList()); ",
 "  } ",
 " ",
 "  Widget buildCard(Widget card) => Container( ",
 "        child: card, ",
 "      ); ",
 "  Widget buildFrontCard(Widget card) => GestureDetector( ",
 "        child: LayoutBuilder(builder: (context, constraints) { ",
 "          int duration; ",
 "          if (_isDragging) { ",
 "            //Since User is Dragging card, no animation is necessary, thus duration = 0) ",
 "            duration = 0; ",
 "          } else { ",
 "            duration = widget ",
 "                .cardResetDuration; //User has released card, animation required for card to fly away or reset to origin ",
 "          } ",
 " ",
 "          //Creates Transform Matrix For Card Tilt and drag animation ",
 "          final center = constraints.smallest.center(Offset.zero); ",
 "          final radians = _toRadians(_angle); ",
 "          final rotatedMatrix = Matrix4.identity() ",
 "            ..translate(center.dx, center.dy) //centers the axis of rotation ",
 "            ..rotateZ(radians) ",
 "            ..translate(-center.dx, -center.dy) //reverts to original axis ",
 "            ..translate(dragPosition.dx, dragPosition.dy); ",
 " ",
 "          return AnimatedContainer( ",
 "              duration: Duration(milliseconds: duration), ",
 "              transform: rotatedMatrix, ",
 "              child: card); ",
 "        }), ",
 "        onPanUpdate: (details) { ",
 "          setState(() { ",
 "            _dragPosition += details.delta; ",
 "            _angle = widget.maxTiltAngle * _dragPosition.dx / _screenSize.width; ",
 "          }); ",
 "        }, ",
 "        onPanEnd: (details) async { ",
 "          _isDragging = false; ",
 " ",
 "          if (_isUpSwipe(_dragPosition.dy, widget.upSwipeSensitivity)) { ",
 "            _flyOutUp(); ",
 "            widget.onUpSwipe(); ",
 "            _toNextCard(); ",
 "          } else if (_isRightSwipe( ",
 "              _dragPosition.dx, widget.sideSwipeSensitivity)) { ",
 "            _flyOutRight(); ",
 "            widget.onRightSwipe(); ",
 "            _toNextCard(); ",
 "          } else if (_isLeftSwipe( ",
 "              _dragPosition.dx, widget.sideSwipeSensitivity)) { ",
 "            _flyOutLeft(); ",
 "            widget.onLeftSwipe(); ",
 "            _toNextCard(); ",
 "          } else { ",
 "            _resetPosition(); ",
 "          } ",
 "        }, ",
 "        onPanStart: (details) { ",
 "          setState(() { ",
 "            _isDragging = true; ",
 "          }); ",
 "        }, ",
 "      ); ",
 " ",
 "  void _toNextCard() async { ",
 "    if (cards.isEmpty) return; ",
 "    await Future.delayed(Duration(milliseconds: 400)); ",
 " ",
 "    cards.removeLast(); ",
 "    setState(() { ",
 "      _isDragging = true; ",
 "    }); ",
 "    _resetPosition(); ",
 "  } ",
 " ",
 "  void _flyOutLeft() { ",
 "    setState(() { ",
 "      _angle = -widget.maxTiltAngle; ",
 "      _dragPosition += Offset(-2 * _screenSize.width, 0); ",
 "    }); ",
 "  } ",
 " ",
 "  void _flyOutRight() { ",
 "    setState(() { ",
 "      _angle = widget.maxTiltAngle; ",
 "      _dragPosition += Offset(2 * _screenSize.width, 0); ",
 "    }); ",
 "  } ",
 " ",
 "  void _flyOutUp() { ",
 "    setState(() { ",
 "      _dragPosition += Offset(0, -2 * _screenSize.height); ",
 "    }); ",
 "  } ",
 " ",
 "  double _toRadians(double degrees) { ",
 "    return degrees * pi / 180; ",
 "  } ",
 " ",
 "  bool _isRightSwipe(double dx, double sideSwipeSensitivity) { ",
 "    return dx >= sideSwipeSensitivity; ",
 "  } ",
 " ",
 "  bool _isLeftSwipe(double dx, double sideSwipeSensitivity) { ",
 "    return dx <= -sideSwipeSensitivity; ",
 "  } ",
 " ",
 "  bool _isUpSwipe(double dy, double upSwipeSensitivity) { ",
 "    return dy <= -upSwipeSensitivity; ",
 "  } ",
 " ",
 "  void _resetPosition() { ",
 "    setState(() { ",
 "      _dragPosition = Offset.zero; ",
 "      _angle = 0; ",
 "    }); ",
 "  } ",
 "} ",

      ],
        
      "description": "card swip cards"
  },






  "card carousel cards" : {
    "prefix": "-card carousel cards",
    "scope": "dart",
    "body": [


 "      class CustomCarouselFB2 extends StatefulWidget { ",
 "        const CustomCarouselFB2({Key? key}) : super(key: key); ",
 "       ",
 "        @override ",
 "        _CustomCarouselFB2State createState() => _CustomCarouselFB2State(); ",
 "      } ",
 "       ",
 "      class _CustomCarouselFB2State extends State<CustomCarouselFB2> { ",
 "       ",
 "        // - - - - - - - - - - - - Instructions - - - - - - - - - - - - - - ",
 "        // 1.Replace cards list with whatever widgets you'd like.  ",
 "        // 2.Change the widgetMargin attribute, to ensure good spacing on all screensize. ",
 "        // 3.If you have a problem with this widget, please contact us at flutterbricks90@gmail.com ",
 "        // Learn to build this widget at https://www.youtube.com/watch?v=dSMw1Nb0QVg! ",
 "        // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ",
 "         ",
 "        List<Widget> cards = [ ",
 "          CardFb1( ",
 "              text: 'Explore', ",
 "              imageUrl: ",
 "                  'https://firebasestorage.googleapis.com/v0/b/flutterbricks-public.appspot.com/o/illustrations%2Fundraw_Working_late_re_0c3y%201.png?alt=media&token=7b880917-2390-4043-88e5-5d58a9d70555',   ",
 "              subtitle: '+30 books', ",
 "              onPressed: () {}), ",
 "          CardFb1( ",
 "              text: 'Explore', ",
 "              imageUrl: ",
 "                  'https://firebasestorage.googleapis.com/v0/b/flutterbricks-public.appspot.com/o/illustrations%2Fundraw_Designer_re_5v95%201.png?alt=media&token=5d053bd8-d0ea-4635-abb6-52d87539b7ec', ",
 "              subtitle: '+30 books', ",
 "              onPressed: () {}), ",
 "          CardFb1( ",
 "              text: 'Explore', ",
 "              imageUrl: ",
 "                  'https://firebasestorage.googleapis.com/v0/b/flutterbricks-public.appspot.com/o/illustrations%2Fundraw_Accept_terms_re_lj38%201.png?alt=media&token=476b97fd-ba66-4f62-94a7-bce4be794f36', ",
 "              subtitle: '+30 books', ",
 "              onPressed: () {}) ",
 "        ]; ",
 "       ",
 "        final double carouselItemMargin = 16;  ",
 "       ",
 "        late PageController _pageController; ",
 "        int _position = 0; ",
 "       ",
 "        @override ",
 "        void initState() { ",
 "          super.initState(); ",
 "          _pageController = PageController(initialPage: 0, viewportFraction: .7); ",
 "        } ",
 "       ",
 "        @override ",
 "        Widget build(BuildContext context) { ",
 "          return PageView.builder( ",
 "              controller: _pageController, ",
 "              itemCount: cards.length, ",
 "              onPageChanged: (int position) { ",
 "                setState(() { ",
 "                  _position = position; ",
 "                }); ",
 "              }, ",
 "              itemBuilder: (BuildContext context, int position) { ",
 "                return imageSlider(position); ",
 "              }); ",
 "        } ",
 "       ",
 "        Widget imageSlider(int position) { ",
 "          return AnimatedBuilder( ",
 "            animation: _pageController, ",
 "            builder: (BuildContext context, widget) { ",
 "              return Container( ",
 "                margin: EdgeInsets.all(carouselItemMargin), ",
 "                child: Center(child: widget), ",
 "              ); ",
 "            }, ",
 "            child: Container( ",
 "              child: cards[position], ",
 "            ), ",
 "          ); ",
 "        } ",
 "      } ",
 "       ",
 "      class CardFb1 extends StatelessWidget { ",
 "        final String text; ",
 "        final String imageUrl; ",
 "        final String subtitle; ",
 "        final Function() onPressed; ",
 "       ",
 "        const CardFb1( ",
 "            {required this.text, ",
 "            required this.imageUrl, ",
 "            required this.subtitle, ",
 "            required this.onPressed, ",
 "            Key? key}) ",
 "            : super(key: key); ",
 "       ",
 "        @override ",
 "        Widget build(BuildContext context) { ",
 "          return GestureDetector( ",
 "            onTap: onPressed, ",
 "            child: Container( ",
 "              width: 250, ",
 "              height: 230, ",
 "              padding: const EdgeInsets.all(30.0), ",
 "              decoration: BoxDecoration( ",
 "                color: Colors.white, ",
 "                borderRadius: BorderRadius.circular(12.5), ",
 "                boxShadow: [ ",
 "                  BoxShadow( ",
 "                      offset: const Offset(10, 20), ",
 "                      blurRadius: 10, ",
 "                      spreadRadius: 0, ",
 "                      color: Colors.grey.withOpacity(.05)), ",
 "                ], ",
 "              ), ",
 "              child: Column( ",
 "                children: [ ",
 "                  Image.network(imageUrl, height: 90, fit: BoxFit.cover), ",
 "                  const Spacer(), ",
 "                  Text(text, ",
 "                      textAlign: TextAlign.center, ",
 "                      style: const TextStyle( ",
 "                        color: Colors.black, ",
 "                        fontWeight: FontWeight.bold, ",
 "                        fontSize: 18, ",
 "                      )), ",
 "                  const SizedBox( ",
 "                    height: 5, ",
 "                  ), ",
 "                  Text( ",
 "                    subtitle, ",
 "                    textAlign: TextAlign.center, ",
 "                    style: const TextStyle( ",
 "                        color: Colors.grey, ",
 "                        fontWeight: FontWeight.normal, ",
 "                        fontSize: 12), ",
 "                  ), ",
 "                  const SizedBox( ",
 "                    height: 10, ",
 "                  ), ",
 "                ], ",
 "              ), ",
 "            ), ",
 "          ); ",
 "        } ",
 "      } ",
      
      

],
        
"description": "card carousel cards"
},


"card credit card" : {
  "prefix": "-card credit card",
  "scope": "dart",
  "body": [


" //- - - - - - - - - Instructions - - - - - - - - - - - - - - - - - -  ",
" // ",
" // Default Widget call (instantiation):  ",
" //  - CreditCard(onTopRightButtonClicked: () {}, cardIcon: Image.network('https://firebasestorage.googleapis.com/v0/b/flutterbricks-public.appspot.com/o/mastercard.png?alt=media&token=1ae51e14-5a60-4dbf-8a42-47cb9c3c1dfe',  width: 50,))  ",
" // ",
" // Coming Soon: ",
" //  - integration into a a card stack ",
" // ",
" //- - - - - - - - - - - - - - -  - - - - - - - - - - - - - - - - - - ",
"  ",
" class CreditCard extends StatelessWidget { ",
"   final String balance; ",
"   final String cardNumber; ",
"   final Function onTopRightButtonClicked; ",
"   final Gradient backgroundGradient; ",
"   final Widget ",
"       cardIcon; //Should be an Image.network(...) or Image.asset(...) Widget ",
"  ",
"   const CreditCard({ ",
"     Key? key, ",
"     required this.onTopRightButtonClicked, ",
"     required this.cardIcon, ",
"     this.balance = '2,850.00$', ",
"     this.cardNumber = '****  ****  ****  3799', ",
"     this.backgroundGradient = ",
"         const LinearGradient(colors: [Colors.black87, Colors.black54]), ",
"   }) : super(key: key); ",
"  ",
"   @override ",
"   Widget build(BuildContext context) { ",
"     return Container( ",
"       width: MediaQuery.of(context).size.width, ",
"       height: MediaQuery.of(context).size.height / 4, ",
"       decoration: BoxDecoration( ",
"         borderRadius: BorderRadius.circular(15.0), ",
"         gradient: backgroundGradient, ",
"         boxShadow: [ ",
"           BoxShadow( ",
"             color: Colors.black.withOpacity(.25), ",
"             offset: Offset(0, 15), ",
"             blurRadius: 45, ",
"           ) ",
"         ], ",
"       ), ",
"       child: Stack( ",
"         children: [ ",
"           Align( ",
"             alignment: Alignment.topRight, ",
"             child: Padding( ",
"               padding: const EdgeInsets.all(5.0), ",
"               child: IconButton( ",
"                 icon: Icon( ",
"                   Icons.more_horiz, ",
"                   color: Colors.white, ",
"                   size: 30, ",
"                 ), ",
"                 onPressed: () { ",
"                   onTopRightButtonClicked(); ",
"                 }, ",
"               ), ",
"             ), ",
"           ), ",
"           Align( ",
"               alignment: Alignment.bottomRight, ",
"               child: Padding( ",
"                 padding: const EdgeInsets.all(15.0), ",
"                 child: Row( ",
"                   mainAxisAlignment: MainAxisAlignment.spaceBetween, ",
"                   children: [ ",
"                     Text( ",
"                       cardNumber, ",
"                       style: TextStyle( ",
"                           fontSize: 18, ",
"                           fontWeight: FontWeight.normal, ",
"                           color: Colors.white), ",
"                     ), ",
"                     Image.network( ",
"                       'https://firebasestorage.googleapis.com/v0/b/flutterbricks-public.appspot.com/o/mastercard.png?alt=media&token=1ae51e14-5a60-4dbf-8a42-47cb9c3c1dfe', ",
"                       width: 50, ",
"                     ), ",
"                   ], ",
"                 ), ",
"               )), ",
"           Align( ",
"             alignment: Alignment.centerLeft, ",
"             child: Padding( ",
"               padding: const EdgeInsets.all(15.0), ",
"               child: Column( ",
"                 crossAxisAlignment: CrossAxisAlignment.start, ",
"                 mainAxisSize: MainAxisSize.min, ",
"                 children: [ ",
"                   Text( ",
"                     balance, ",
"                     style: TextStyle( ",
"                         fontSize: 36, ",
"                         fontWeight: FontWeight.bold, ",
"                         color: Colors.white), ",
"                   ), ",
"                   Text( ",
"                     'Balance', ",
"                     style: TextStyle( ",
"                         fontSize: 18, ",
"                         fontWeight: FontWeight.normal, ",
"                         color: Colors.grey[400]), ",
"                   ), ",
"                 ], ",
"               ), ",
"             ), ",
"           ) ",
"         ], ",
"       ), ",
"     ); ",
"   } ",
" } ",


      
],
        
"description": "card credit cards"
},


// 21 drawer

      "drawer" : {
        "prefix": "-drawer",
        "scope": "dart",
        "body": [

"          class DrawerFb1 extends StatelessWidget { ",
"            @override ",
"            Widget build(BuildContext context) { ",
"           ",
"              return Drawer( ",
"                  child: Material( ",
"                    color: Color(0xff4338CA), ",
"                    child: ListView( ",
"                      children: <Widget>[ ",
"                        Container( ",
"                          padding: EdgeInsets.all(15.0), ",
"                          child: Column( ",
"                            children: [ ",
"                              const SizedBox(height: 12), ",
"                              SearchFieldDrawer(), ",
"                              const SizedBox(height: 12), ",
"                              MenuItem( ",
"                                text: 'Friends', ",
"                                icon: Icons.people, ",
"                                onClicked: () => selectedItem(context, 0), ",
"                              ), ",
"                              const SizedBox(height: 5), ",
"                              MenuItem( ",
"                                text: 'Liked Photos', ",
"                                icon: Icons.favorite_border, ",
"                                onClicked: () => selectedItem(context, 1), ",
"                              ), ",
"                              const SizedBox(height: 5), ",
"                              MenuItem( ",
"                                text: 'Workflow', ",
"                                icon: Icons.workspaces_outline, ",
"                                onClicked: () => selectedItem(context, 2), ",
"                              ), ",
"                              const SizedBox(height: 5), ",
"                              MenuItem( ",
"                                text: 'Updates', ",
"                                icon: Icons.update, ",
"                                onClicked: () => selectedItem(context, 3), ",
"                              ), ",
"                              const SizedBox(height: 8), ",
"                              Divider(color: Colors.white70), ",
"                              const SizedBox(height: 8), ",
"                              MenuItem( ",
"                                text: 'Notifications', ",
"                                icon: Icons.notifications_outlined, ",
"                                onClicked: () => selectedItem(context, 5), ",
"                              ), ",
"                              MenuItem( ",
"                                text: 'Settings', ",
"                                icon: Icons.settings, ",
"                                onClicked: () => selectedItem(context, 6), ",
"                              ), ",
"                            ], ",
"                          ), ",
"                        ), ",
"                      ], ",
"                    ), ",
"                  ), ",
"              ); ",
"            } ",
"           ",
"           ",
"           ",
"            void selectedItem(BuildContext context, int index) { ",
"              Navigator.of(context).pop(); ",
"              switch (index) { ",
"                case 0: ",
"                  Navigator.of(context).push(MaterialPageRoute( ",
"                    builder: (context) => Scaffold(), // Page 1 ",
"                  )); ",
"                  break; ",
"                case 1: ",
"                  Navigator.of(context).push(MaterialPageRoute( ",
"                    builder: (context) => Scaffold(), // Page 2 ",
"                  )); ",
"                  break; ",
"              } ",
"            } ",
"          } ",
"          class MenuItem extends StatelessWidget { ",
"            final String text; ",
"            final IconData icon; ",
"            final VoidCallback? onClicked; ",
"             ",
"            const MenuItem({required this.text, ",
"              required this.icon, ",
"              this.onClicked,Key? key, }) : super(key: key); ",
"           ",
"            @override ",
"            Widget build(BuildContext context) { ",
"              final color = Colors.white; ",
"              final hoverColor = Colors.white70; ",
"           ",
"              return ListTile( ",
"                leading: Icon(icon, color: color), ",
"                title: Text(text, style: TextStyle(color: color)), ",
"                hoverColor: hoverColor, ",
"                onTap: onClicked, ",
"              ); ",
"            } ",
"          } ",
"          class SearchFieldDrawer extends StatelessWidget { ",
"            const SearchFieldDrawer({Key? key}) : super(key: key); ",
"           ",
"            @override ",
"            Widget build(BuildContext context) { ",
"              final color = Colors.white; ",
"           ",
"              return TextField( ",
"                style: TextStyle(color: color,fontSize: 14), ",
"                decoration: InputDecoration( ",
"                  contentPadding: EdgeInsets.symmetric(horizontal: 5, vertical: 5), ",
"                  hintText: 'Search',",
"                  hintStyle: TextStyle(color: color),",
"                  prefixIcon: Icon(Icons.search, color: color,size: 20,),",
"                  filled: true,",
"                  fillColor: Colors.white12,",
"                  enabledBorder: OutlineInputBorder(",
"                    borderRadius: BorderRadius.circular(15),",
"                    borderSide: BorderSide(color: color.withOpacity(0.7)),",
"                  ),",
"                  focusedBorder: OutlineInputBorder(",
"                    borderRadius: BorderRadius.circular(15),",
"                    borderSide: BorderSide(color: color.withOpacity(0.7)),",
"                  ),",
"                ),",
"              );",
"            }",

          
          
      ],
        
        "description": "Drawer"
      },


  






        
  // 22

  "navigation page no" : {
    "prefix": "-navigation page no btn",
    "scope": "dart",
    "body": [


  "    class PageSelector extends StatefulWidget {",
  "      final List<String> textArray;",
  "      final Function(int) onChange;",
  "    ",
  "      PageSelector({required this.textArray, required this.onChange, Key? key})",
  "          : super(key: key);",
  "    ",
  "      @override",
  "      State<PageSelector> createState() => _PageSelectorState();",
  "    }",
  "    ",
  "    class _PageSelectorState extends State<PageSelector> {",
  "      int _currentIndex = 0;",
  "    ",
  "      @override",
  "      Widget build(BuildContext context) {",
  "        return Container(",
  "          decoration: BoxDecoration(color: Colors.grey.shade200),",
  "          child: Row(",
  "            mainAxisAlignment: MainAxisAlignment.spaceBetween,",
  "            children: [",
  "              CircularArrow(",
  "                  icon: Icon(",
  "                    Icons.keyboard_arrow_left,",
  "                    color: Colors.white,",
  "                  ),",
  "                  onPressed: () {",
  "                    if (_currentIndex <= 0) {",
  "                      return;",
  "                    }",
  "                    widget.onChange(_currentIndex);",
  "                    setState(() {",
  "                      _currentIndex -= 1;",
  "                    });",
  "                  }),",
  "              Text(",
  "                widget.textArray[_currentIndex],",
  "                style: TextStyle(fontWeight: FontWeight.bold),",
  "              ),",
  "              CircularArrow(",
  "                  icon: Icon(",
  "                    Icons.keyboard_arrow_right,",
  "                    color: Colors.white,",
  "                  ),",
  "                  onPressed: () {",
  "                    if (_currentIndex >= widget.textArray.length - 1) {",
  "                      return;",
  "                    }",
  "                    widget.onChange(_currentIndex);",
  "                    setState(() {",
  "                      _currentIndex += 1;",
  "                    });",
  "                  }),",
  "            ],",
  "          ),",
  "        );",
  "      }",
  "    }",
  "    class CircularArrow extends StatelessWidget {",
  "      final Icon icon;",
  "      final Function() onPressed;",
  "      const CircularArrow({required this.icon, required this.onPressed, Key? key})",
  "          : super(key: key);",
  "    ",
  "      @override",
  "      Widget build(BuildContext context) {",
  "        return IconButton(",
  "          onPressed: onPressed,",
  "          icon: CircleAvatar(backgroundColor: Colors.blue, child: icon),",
  "          iconSize: 25,",
  "        );",
  "      }",
  "    }",
      
      
      
  ],
    
    "description": "navigation page no btn Like 12345 next"
  },


 






        
  // 23

  "circle avtar" : {
    "prefix": "-circleavatar",
    "scope": "dart",
    "body": [


"      class CircleAvatarWithTransition extends StatelessWidget { ",
"        /// the base color of the images background and its concentric circles. ",
"        final Color primaryColor; ",
"       ",
"        /// the profile image to be displayed. ",
"        final ImageProvider image; ",
"       ",
"        ///the diameter of the entire widget, including the concentric circles. ",
"        final double size; ",
"       ",
"        /// the width between the edges of each concentric circle. ",
"        final double transitionBorderwidth; ",
"       ",
"        const CircleAvatarWithTransition( ",
"            {Key? key, ",
"            required Color this.primaryColor, ",
"            required ImageProvider this.image, ",
"            this.size = 190.0, ",
"            this.transitionBorderwidth = 20.0}) ",
"            : super(key: key); ",
"        @override ",
"        Widget build(BuildContext context) { ",
"          return Stack( ",
"            alignment: AlignmentDirectional.center, ",
"            children: <Widget>[ ",
"              Container( ",
"                  child: Container( ",
"                height: size, ",
"                width: size, ",
"                decoration: BoxDecoration( ",
"                    shape: BoxShape.circle, color: primaryColor.withOpacity(0.05)),  ",
"              )), ",
"              Container( ",
"                child: Container( ",
"                    height: size - transitionBorderwidth, ",
"                    width: size - transitionBorderwidth, ",
"                    decoration: BoxDecoration( ",
"                      shape: BoxShape.circle, ",
"                      gradient: RadialGradient( ",
"                          stops: [0.01, 0.5], ",
"                          colors: [Colors.white, primaryColor.withOpacity(0.1)]), ",
"                    )), ",
"              ), ",
"              Container( ",
"                child: Container( ",
"                    height: size - (transitionBorderwidth * 2), ",
"                    width: size - (transitionBorderwidth * 2), ",
"                    decoration: BoxDecoration( ",
"                        shape: BoxShape.circle, ",
"                        color: primaryColor.withOpacity(0.4))), ",
"              ), ",
"              Container( ",
"                child: Container( ",
"                    height: size - (transitionBorderwidth * 3), ",
"                    width: size - (transitionBorderwidth * 3), ",
"                    decoration: BoxDecoration( ",
"                        shape: BoxShape.circle, ",
"                        color: primaryColor.withOpacity(0.5))), ",
"              ), ",
"              Container( ",
"                  child: Container( ",
"                      height: size - (transitionBorderwidth * 4), ",
"                      width: size - (transitionBorderwidth * 4), ",
"                      decoration: BoxDecoration( ",
"                          shape: BoxShape.circle, ",
"                          image: DecorationImage(fit: BoxFit.cover, image: image)))) ",
"            ], ",
"          ); ",
"        } ",
"      } ",
      
      
      
      
      
  ],
    
    "description": "circle avatar with radius transion animations Like Waves Like Circles"
  },




  // 24

  "simple Alerts" : {
    "prefix": "-alert simple",
    "scope": "dart",
    "body": [


"      class AlertDialogFb1 extends StatelessWidget { ",
"        final String title; ",
"        final String description; ",
"       ",
"        final List<TextButton> actions; ",
"       ",
"        const AlertDialogFb1({required this.title, required this.description, required this.actions, Key? key}) : super(key: key);  ",
"       ",
"        @override ",
"        Widget build(BuildContext context) { ",
"          return AlertDialog( ",
"            title: Text(title), ",
"            content: ",
"                Text(description), ",
"            actions: actions, ",
"          ); ",
"        } ",
"      } ",
      
    
      
  ],
    
    "description": "simple Alerts"
  },



  "Alerts cupertino" : {
    "prefix": "-alert cupertino",
    "scope": "dart",
    "body": [


"      showCupertinoDialog( ",
"      context: context, ",
"      builder: (BuildContext context) { ",
"        return CupertinoAlertDialog( ",
"          title: const Text('IoS Alert'), ",
"          actions: [ ",
"            const CupertinoButton(onPressed: null, child: Text('yes')),  ",
"            CupertinoButton.filled( ",
"                onPressed: () { ",
"                  Navigator.pop(context); ",
"                }, ",
"                child: const Icon(Icons.cancel)), ",
"          ], ",
"          insetAnimationCurve: Curves.slowMiddle, ",
"          insetAnimationDuration: const Duration(seconds: 2), ",
"        ); ",
"      }); ",
      
    
      
  ],
    
    "description": "Alert cupertino"
  },




  "alerts actions buttons" : {
    "prefix": "-alert with actions buttons",
    "scope": "dart",
    "body": [


"      class DialogFb1 extends StatelessWidget { ",
"        const DialogFb1({Key? key}) : super(key: key); ",
"        final primaryColor = const Color(0xff4338CA); ",
"        final accentColor = const Color(0xffffffff); ",
"       ",
"         ",
"        @override ",
"        Widget build(BuildContext context) { ",
"          return Dialog( ",
"            elevation: 1, ",
"            shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(15)), ",
"            child: Container( ",
"              width: MediaQuery.of(context).size.width / 1.4, ",
"              height: MediaQuery.of(context).size.height / 4, ",
"              decoration: BoxDecoration( ",
"                  color: Colors.white, ",
"                  borderRadius: BorderRadius.circular(15.0), ",
"                  boxShadow: [ ",
"                    BoxShadow( ",
"                        offset: const Offset(12, 26), ",
"                        blurRadius: 50, ",
"                        spreadRadius: 0, ",
"                        color: Colors.grey.withOpacity(.1)), ",
"                  ]), ",
"              child: Column( ",
"                mainAxisAlignment: MainAxisAlignment.center, ",
"                children: [ ",
"                  CircleAvatar( ",
"                    backgroundColor: primaryColor, ",
"                    radius: 25, ",
"                    child: Image.network( ",
"                        'https://firebasestorage.googleapis.com/v0/b/flutterbricks-public.appspot.com/o/FlutterBricksLogo-Med.png?alt=media&token=7d03fedc-75b8-44d5-a4be-c1878de7ed52'),  ",
"                  ), ",
"                  const SizedBox( ",
"                    height: 15, ",
"                  ), ",
"                  const Text('How are you doing?', ",
"                      style: TextStyle( ",
"                          color: Colors.black, ",
"                          fontSize: 18, ",
"                          fontWeight: FontWeight.bold)), ",
"                  const SizedBox( ",
"                    height: 3.5, ",
"                  ), ",
"                  const Text('This is a sub text, use it to clarify', ",
"                      style: TextStyle( ",
"                          color: Colors.grey, ",
"                          fontSize: 12, ",
"                          fontWeight: FontWeight.w300)), ",
"                  const SizedBox( ",
"                    height: 15, ",
"                  ), ",
"                  Row( ",
"                    mainAxisAlignment: MainAxisAlignment.spaceEvenly, ",
"                    children: [ ",
"                      SimpleBtn1(text: 'Great', onPressed: () {}), ",
"                      SimpleBtn1( ",
"                        text: 'Not bad', ",
"                        onPressed: () { ",
"                        }, ",
"                        invertedColors: true, ",
"                      ), ",
"                    ], ",
"                  ) ",
"                ], ",
"              ), ",
"            ), ",
"          ); ",
"        } ",
"      } ",
"       ",
"      class SimpleBtn1 extends StatelessWidget { ",
"        final String text; ",
"        final Function() onPressed; ",
"        final bool invertedColors; ",
"        const SimpleBtn1( ",
"            {required this.text, ",
"            required this.onPressed, ",
"            this.invertedColors = false, ",
"            Key? key}) ",
"            : super(key: key); ",
"        final primaryColor = const Color(0xff4338CA); ",
"        final accentColor = const Color(0xffffffff); ",
"       ",
"        @override ",
"        Widget build(BuildContext context) { ",
"          return ElevatedButton( ",
"              style: ButtonStyle( ",
"                  elevation: MaterialStateProperty.all(0), ",
"                  alignment: Alignment.center, ",
"                  side: MaterialStateProperty.all( ",
"                      BorderSide(width: 1, color: primaryColor)), ",
"                  padding: MaterialStateProperty.all( ",
"                      const EdgeInsets.only(right: 25, left: 25, top: 0, bottom: 0)), ",
"                  backgroundColor: MaterialStateProperty.all( ",
"                      invertedColors ? accentColor : primaryColor), ",
"                  shape: MaterialStateProperty.all( ",
"                    RoundedRectangleBorder(borderRadius: BorderRadius.circular(15)), ",
"                  )), ",
"              onPressed: onPressed, ",
"              child: Text( ",
"                text, ",
"                style: TextStyle( ",
"                    color: invertedColors ? primaryColor : accentColor, fontSize: 16), ",
"              )); ",
"        } ",
"      } ",
      

      
    
      
  ],
    
    "description": "alert with actions buttons"
  },




  "alerts gradient" : {
    "prefix": "-alert gradient",
    "scope": "dart",
    "body": [



 "     class DialogFb3 extends StatelessWidget { ",
 "       const DialogFb3({Key? key}) : super(key: key); ",
 "      ",
 "       final primaryColor = const Color(0xff4338CA); ",
 "       final secondaryColor = const Color(0xff6D28D9); ",
 "       final accentColor = const Color(0xffffffff); ",
 "       final backgroundColor = const Color(0xffffffff); ",
 "       final errorColor = const Color(0xffEF4444); ",
 "      ",
 "       @override ",
 "       Widget build(BuildContext context) { ",
 "         return Dialog( ",
 "           elevation: 1, ",
 "           shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(15)), ",
 "           child: Container( ",
 "             width: MediaQuery.of(context).size.width / 1.5, ",
 "             height: MediaQuery.of(context).size.height / 5, ",
 "             decoration: BoxDecoration( ",
 "               gradient: LinearGradient(colors:[primaryColor, secondaryColor]), ",
 "                 borderRadius: BorderRadius.circular(15.0), ",
 "                 boxShadow: [ ",
 "                   BoxShadow( ",
 "                       offset: const Offset(12, 26), ",
 "                       blurRadius: 50, ",
 "                       spreadRadius: 0, ",
 "                       color: Colors.grey.withOpacity(.1)), ",
 "                 ]), ",
 "             child: Column( ",
 "               mainAxisAlignment: MainAxisAlignment.center, ",
 "               children: [ ",
 "                 CircleAvatar( ",
 "                   backgroundColor: accentColor.withOpacity(.05), ",
 "                   radius: 25, ",
 "                   child: Image.network( ",
 "                       'https://firebasestorage.googleapis.com/v0/b/flutterbricks-public.appspot.com/o/FlutterBricksLogo-Med.png?alt=media&token=7d03fedc-75b8-44d5-a4be-c1878de7ed52'),   ",
 "                 ), ",
 "                 const SizedBox( ",
 "                   height: 15, ",
 "                 ), ",
 "                  Text('How are you doing?', ",
 "                     style: TextStyle( ",
 "                         color: accentColor, ",
 "                         fontSize: 18, ",
 "                         fontWeight: FontWeight.bold)), ",
 "                 const SizedBox( ",
 "                   height: 3.5, ",
 "                 ), ",
 "                  Text('This is a sub text, use it to clarify', ",
 "                     style: TextStyle( ",
 "                         color: accentColor, ",
 "                         fontSize: 12, ",
 "                         fontWeight: FontWeight.w300)), ",
 "                 const SizedBox( ",
 "                   height: 15, ",
 "                 ), ",
 "               ], ",
 "             ), ",
 "           ), ",
 "         ); ",
 "       } ",
 "     } ",
      
    
      
  ],
    
    "description": "alert simple with gradients background"
  },



  // 25


  "time picker material 1" : {
    "prefix": "-time picker 1",
    "scope": "dart",
    "body": [


"      /* Call when you want to show the time picker */ ",
" final DateTime? newDate = await showDatePicker( ",
" context: context, ",
" initialDate: DateTime(2020, 11, 17), ",
" firstDate: DateTime(2017, 1), ",
" lastDate: DateTime(2022, 7), ",
" helpText: 'Select a date', ",
" ); ",
    
      
  ],
    
    "description": "time picker material 1"
  },



  "time picker 2" : {
    "prefix": "-time picker 2",
    "scope": "dart",
    "body": [


"      Column( ",
"      children: [ ",
"        /* make a datetime var OR Paste On Override:  ",
"          DateTime datepicker = DateTime.now(); */ ",
"        Text( ",
"            'Date is: ${datepicker.year} - ${datepicker.month} - ${datepicker.day} '), ",
"        /* if need time  ",
"        Text( ",
"            'Time Is: ${datepicker.hour} : ${datepicker.minute} : ${datepicker.second}'), */  ",
"        ElevatedButton( ",
"          onPressed: () async { ",
"            /* if need time picker Wrap : showTimePicker */ ",
"            var getdates = await showDatePicker( ",
"              context: context, ",
"              initialDate: datepicker, ",
"              firstDate: DateTime(2000), ",
"              lastDate: DateTime(3000), ",
"            ); ",
"            if (getdates != null) { ",
"              setState(() { ",
"                datepicker = getdates; ",
"              }); ",
"            } ",
"          }, ",
"          child: Icon(Icons.more_time), ",
"        ), ",
"      ], ",
"    ), ",

    
      
  ],
    
    "description": "time picker 2"
  },



  "date picker" : {
    "prefix": "-date picker",
    "scope": "dart",
    "body": [

"      Column( ",
"      children: [ ",
"        /* make a datetime var OR Paste On Override:  ",
"            DateTimeRange vardaterange = ",
"      DateTimeRange(start: DateTime.now(), end: DateTime.now()); */  ",
"        Text('Date is: ${viewardaterange.duration.inDays}'), ",
"        ElevatedButton( ",
"            onPressed: () async { ",
"              DateTimeRange? getrange = await showDateRangePicker( ",
"                  context: context, ",
"                  firstDate: DateTime(2000), ",
"                  lastDate: DateTime(2023)); ",
"              if (getrange != null) { ",
"                setState(() { ",
"                  viewardaterange = getrange; ",
"                }); ",
"              } ",
"            }, ",
"            child: Text(' Select Date Range Picker')), ",
"      ], ",
"    ), ",

    
      
  ],
    
    "description": "date picker"
  },





  // 26

  "background box type gradient" : {
    "prefix": "-background box type gradient",
    "scope": "dart",
    "body": [


"      class BackgroundImageFb1 extends StatelessWidget { ",
"        final Widget child; ",
"        final String imageUrl; ",
"        const BackgroundImageFb1( ",
"            {required this.child, required this.imageUrl, Key? key}) ",
"            : super(key: key); ",
"       ",
"        @override ",
"        Widget build(BuildContext context) { ",
"          return Container( ",
"            // Place as the child widget of a scaffold ",
"            width: double.infinity, ",
"            height: double.infinity, ",
"            decoration: BoxDecoration( ",
"              image: DecorationImage( ",
"                image: NetworkImage(imageUrl), ",
"                fit: BoxFit.cover, ",
"              ), ",
"            ), ",
"            child: child, ",
"          ); ",
"        } ",
"      } ",
    
      
  ],
    
    "description": "box type background gradient"
  },




  // 27

  " theme " : {
    "prefix": "-theme light dark",
    "scope": "dart",
    "body": [


 "     ThemeData lightthemef() { ",
 "       return ThemeData( ",
 "         floatingActionButtonTheme: const FloatingActionButtonThemeData( ",
 "             backgroundColor: Color.fromARGB(76, 59, 2, 145)), ",
 "         primarySwatch: Colors.indigo, ",
 "         scaffoldBackgroundColor: const Color.fromARGB(14, 4, 1, 44), ",
 "         backgroundColor: Colors.red, ",
 "         // cardColor: Color.fromARGB(215, 229, 171, 239).withOpacity(0. 4),",
 "         colorScheme: const ColorScheme.light( ",
 "             background: Color.fromARGB(190, 176, 134, 255), ",
 "             primaryContainer: Color.fromARGB(191, 248, 247, 250)), ",
 "       ); ",
 "     } ",
 "      ",
 "     ThemeData darkthemef() { ",
 "       return ThemeData( ",
 "         brightness: Brightness.dark, ",
 "         primarySwatch: Colors.cyan, ",
 "         appBarTheme: const AppBarTheme( ",
 "           color: Color.fromARGB(255, 0, 159, 135), ",
 "         ), ",
 "         colorScheme: const ColorScheme.dark( ",
 "             background: Color.fromARGB(216, 3, 137, 117), ",
 "             primaryContainer: Color.fromARGB(142, 0, 0, 0)), ",
 "       ); ",
 "     } ",
 "     // second type is: ",
 "     ThemeData.light.copywith(){} ",
    
      
  ],
    
    "description": "theme light dark"
  },





  // 28

  "list view reorder able" : {
    "prefix": "-list view reorder able",
    "scope": "dart",
    "body": [


 "  /* make a list generater ",
 "     or paste it on override */ ",
 "     final List<int> items = List<int>.generate(15, ((int index) => index));  ",
 "  /* need child */  ",
 "               ",
 "              ReorderableListView( ",
 "     children: List.generate( ",
 "       items.length, ",
 "       (index) => ListTile( ",
 "         key: Key('$index'), ",
 "         leading: Icon(Icons.person), ",
 "         tileColor: ",
 "             items[index].isOdd ? Colors.orangeAccent : Colors.cyanAccent, ",
 "         title: Text('items is ${items[index]}'), ",
 "         trailing: Icon(Icons.drag_handle), ",
 "       ), ",
 "     ), ",
 "     onReorder: (int oldindex, int newIndex) { ",
 "       setState(() { ",
 "         if (oldindex < newIndex) { ",
 "           newIndex -= 1; ",
 "         } ",
 "         // delete old index loc ",
 "         int itemindex = items.removeAt(oldindex); ",
 "         // set new loc by index ",
 "         items.insert(newIndex, itemindex); ",
 "       }); ",
 "     }, ",
 "   ); ",

    
      
  ],
    
    "description": "reorder able list view"
  },


  // 29

  "navigation" : {
    "prefix": "-navigation route to page",
    "scope": "dart",
    "body": [

"      Navigator.push( ",
"      context, ",
"      MaterialPageRoute(builder: (context) => Openchat()), ",
"    ); ",
    
  ],
    
    "description": "navigation to others page"
  },

  // 30

  "layout builder" : {
    "prefix": "-layout builder",
    "scope": "dart",
    "body": [
 "     return LayoutBuilder( ",
 "     builder: (BuildContext context, BoxConstraints constraints) { ",
 "   if (constraints.maxWidth <= 424) { ",
 "     return const Phone(); ",
 "   } else if (constraints.maxWidth >= 424 && constraints.maxWidth <= 1024) {  ",
 "     return const Tablet(); ",
 "   } else { ",
 "     return const Desktop(); ",
 "   } ",
 " }); ",
  ],
    
    "description": "layout builder and landscape modes"
  },

// 31

  "api post image flutter" : {
    "prefix": "-api image post only by flutter",
    "scope": "dart",
    "body": [
 "// set this to global variable in class after initState ",
 "late String imagpath = ''; ",
 "//// make a button ",
"onTap: () async { ",
 "                      var image = await ImagePicker().pickImage( ",
 "                          source: ImageSource.gallery, imageQuality: 40); ",
 "                      if (image != null) { ",
 "                        setState(() { ",
 "                          imagpath = image.path; ",
 "                        }); ",
 "                      } ",
 "                    }, ",
"step 2: ",
"ElevatedButton( ",
 "              onPressed: () async { ",
 "                try { ",
 "                  // this is a local host xamp server link ",
 "                  // can used 'http://localhost/index.php'; but the need to write with port thats from xamp control panel can view its by default 80 or 8080  ",
 "                  // can used second method open cmd write here ipconfig to get ip address like this 192.168.43.145 to this link http://192.168.43.145/index.php ",
 "                  const String apiUrl = 'http://192.168.43.145/index.php'; ",
 "                  var request = ",
 "                      http.MultipartRequest('POST', Uri.parse(apiUrl)); ",
 "                  request.files.add( ",
 "                      await http.MultipartFile.fromPath('image', imagpath));  ",
 "                  var response = await request.send(); ",
 "                  if (response.statusCode == 200) { ",
 "                    var responseData = await response.stream.toBytes(); ",
 "                    var responseString = String.fromCharCodes(responseData); ",
 "                    var bodydata = jsonDecode(responseString); ",
 "                    ScaffoldMessenger.of(context).showSnackBar( ",
 "                      SnackBar(content: Text(bodydata['message'])), ",
 "                    ); ",
 "                  } else { ",
 "                    print('Error uploading image: ${response.statusCode}'); ",
 "                  } ",
 "                } catch (e) { ",
 "                  print('${e.toString()}----try catch----'); ",
 "                } ",
 "              }, ",
 "              child: Text('Send only Image'), ",
 "            ), ",

  ],
    
    "description": "post an image only by flutter to rest api"
  },

 // 32

 "api post image php" : {
  "prefix": "-api image post only by php",
  "scope": "dart",
  "body": [
 "      <?php ",
 "   ",
 "      // Set headers to allow cross-origin requests ",
 "     header('Access-Control-Allow-Origin: *'); ",
 "     header('Content-Type: application/json'); ",
 "      ",
 "     // Set database credentials ",
 "     $servername = 'localhost'; ",
 "     $username = 'root'; // Replace with your MySQL username ",
 "     $password = ''; // Replace with your MySQL password ",
 "     $dbname = 'it_life'; // Replace with the name of your MySQL database ",
 "      ",
 "     // Create connection ",
 "     $conn = mysqli_connect($servername, $username, $password, $dbname); ",
 "      ",
 "     // Check connection ",
 "     if (!$conn) { ",
 "       die('Connection failed: ' . mysqli_connect_error()); ",
 "     } ",
 "     ///// for get an image  ",
 "       if ($_SERVER['REQUEST_METHOD'] === 'POST') { ",
 "       // Save the uploaded image file ",
 "       $target_dir = 'uploads/'; ",
 "       $target_file = $target_dir . basename($_FILES['image']['name']); ",
 "       move_uploaded_file($_FILES['image']['tmp_name'], $target_file); ",
 "       $image_url = 'http://192.168.43.145/' . $target_file; ",
 "        ",
 "       // Save the image URL to the database ",
 "       $sql = 'INSERT INTO user_profile (image) VALUES ('$image_url')'; ",
 "        ",
 "       // Execute query ",
 "       if (mysqli_query($conn, $sql)) { ",
 "         // If the query was successful, return a success message as a JSON response ",
 "         echo json_encode(array('message' => 'Image uploaded and saved to database successfully')); ",
 "       } else { ",
 "         // If the query failed, return an error message as a JSON response ",
 "         echo json_encode(array('message' => 'Error inserting data: ' . mysqli_error($conn))); ",
 "       } ",
 "     } else { ",
 "       // If the request method is not POST, return an error message as a JSON response ",
 "       echo json_encode(array('message' => 'Invalid request method')); ",
 "     } ",
 "     ?> ",
],
  
  "description": "post an image only by php to rest api"
},
 // 33

 "api simple text post flutter" : {
  "prefix": "-api simple text post data in flutter",
  "scope": "dart",
  "body": [
 "   ElevatedButton( ",
 "   onPressed: () async { ",
 "     try { ",
 "       // this is a local host xamp server link ",
 "       // can used 'http://localhost/index.php'; but the need to write with port thats from xamp control panel can view its by default 80 or 8080  ",
 "       // can used second method open cmd write here ipconfig to get ip address like this 192.168.43.145 to this link http://192.168.43.145/index.php ",
 "       const String apiUrl = 'http://192.168.43.145/index.php'; ",
" ",
 "       var data = { ",
 "         'username': 'John Doe1', ",
 "         'phone': '555-12341', ",
 "         'address': '123 Main St1', ",
 "         'city': 'Anytown1', ",
 "         'image': 'https://example.com/image1.jpg' ",
 "       }; ",
 "       var response = await http.post( ",
 "         Uri.parse(apiUrl), ",
 "         headers: {'Content-Type': 'application/json'}, ",
 "         body: jsonEncode(data), ",
 "       ); ",
 "       if (response.statusCode == 200) { ",
 "         var bodydata = jsonDecode(response.body); ",
 "         ScaffoldMessenger.of(context).showSnackBar( ",
 "           SnackBar(content: Text(bodydata.toString())), ",
 "         ); ",
 "       } else { ",
 "         print('Error posting data: ${response.statusCode}'); ",
 "       } ",
 "     } catch (e) { ",
 "       print('${e.toString()}----try catch----'); ",
 "     } ",
 "   }, ",
 "   child: Text('Send Data text only'), ",
 " ), ",
], 
  
  "description": "api simple post text data in flutter"
},



  // 34

  "api simple php post text data in php" : {
    "prefix": "-api simple php post text data in php",
    "scope": "dart",
    "body": [
 " <?php ",
 " // Set headers to allow cross-origin requests ",
 " header('Access-Control-Allow-Origin: *'); ",
 " header('Content-Type: application/json'); ",
 "  ",
 " // Set database credentials ",
 " $servername = 'localhost'; ",
 " $username = 'root'; // Replace with your MySQL username ",
 " $password = ''; // Replace with your MySQL password ",
 " $dbname = 'it_life'; // Replace with the name of your MySQL database ",
 "  ",
 " // Create connection ",
 " $conn = mysqli_connect($servername, $username, $password, $dbname); ",
 "  ",
 " // Check connection ",
 " if (!$conn) { ",
 "   die('Connection failed: ' . mysqli_connect_error()); ",
 " } ",
 "  ",
 " // Check if the request method is POST ",
 " if ($_SERVER['REQUEST_METHOD'] === 'POST') { ",
 "   // Get the raw POST data ",
 "   $rawData = file_get_contents('php://input'); ",
 "  ",
 "   // Decode the JSON data ",
 "   $data = json_decode($rawData, true); ",
 "  ",
 "   // Get the data from the POST request ",
 "   $username = mysqli_real_escape_string($conn, $data['username']); ",
 "   $phone = mysqli_real_escape_string($conn, $data['phone']); ",
 "   $address = mysqli_real_escape_string($conn, $data['address']); ",
 "   $city = mysqli_real_escape_string($conn, $data['city']); ",
 "   $image = mysqli_real_escape_string($conn, $data['image']); ",
 "  ",
 "   // SQL query to insert data into the user_profile table ",
 "   $sql = 'INSERT INTO user_profile (username, phone, address, city, image) VALUES ( '$username', '$phone', '$address', '$city', '$image')';  ",
 "  ",
 "   // Execute query ",
 "   if (mysqli_query($conn, $sql)) { ",
 "     // If the query was successful, return a success message as a JSON response ",
 "     echo json_encode(array('message' => 'Data inserted successfully')); ",
 "   } else { ",
 "     // If the query failed, return an error message as a JSON response ",
 "     echo json_encode(array('message' => 'Error inserting data: ' . mysqli_error($conn))); ",
 "   } ",
 " } else { ",
 "   // If the request method is not POST, return an ",
 " } ",
 " ?> ",

  ],
    
    "description": "api simple php post text data in php"
  },
  // 35

  "api post image with data in flutter" : {
    "prefix": "-api post image with data in flutter",
    "scope": "dart",
    "body": [
" // set this to global variable in class after initState ",
" late String imagpath = ''; ",
" //// make a button ",
"onTap: () async { ",
"                       var image = await ImagePicker().pickImage( ",
"                           source: ImageSource.gallery, imageQuality: 40); ",
"                       if (image != null) { ",
"                         setState(() { ",
"                           imagpath = image.path; ",
"                         }); ",
"                       } ",
"                     }, ",
"step 2: ",
"  ElevatedButton( ",
"               onPressed: () async { ",
"                 var request = http.MultipartRequest( ",
"                   'POST', ",
"                   // this is a local host xamp server link ",
"                   // can used 'http://localhost/index.php'; but the need to write with port thats from xamp control panel can view its by default 80 or 8080 ", 
"                   // can used second method open cmd write here ipconfig to get ip address like this 192.168.43.145 to this link http://192.168.43.145/index.php ",
"                   Uri.parse('http://192.168.43.145/index.php'), ",
"                 ); ",
" ",
"                 // Add the image file to the request ",
"                 var image = ",
"                     await http.MultipartFile.fromPath('image', imagpath); ",
"                 request.files.add(image); ",
" ",
"                 // Add the username and text fields to the request ",
"                 request.fields['username'] = 'username1'; ",
"                 request.fields['phone'] = '1234'; ",
"                 request.fields['address'] = '1234'; ",
"                 request.fields['city'] = 'city name'; ",
" ",
"                 // Send the request and get the response ",
"                 var response = await request.send(); ",
" ",
"                 // Check the response status code ",
"                 if (response.statusCode == 200) { ",
"                   // Read and print the response data as a string ",
"                   var responseData = await response.stream.toBytes(); ",
"                   var responseString = utf8.decode(responseData); ",
"                   debugPrint('${responseString.toString()}'); ",
"                 } else { ",
"                   // Print an error message if the response status code is not 200 ",
"                   debugPrint('Error: ${response.statusCode}'); ",
"                 } ",
"               }, ",
"               child: Text('Send Image with Data'), ",
"             ), ",

  ],
    
    "description": "api post image with data in flutter"
  },
  // 36

  "api post image with data in php" : {
    "prefix": "-api post image with data in php",
    "scope": "dart",
    "body": [
 "     <?php ",
 "     // Set headers to allow cross-origin requests ",
 "     header('Access-Control-Allow-Origin: *'); ",
 "     header('Content-Type: application/json'); ",
 "      ",
 "     // Set database credentials ",
 "     $servername = 'localhost'; ",
 "     $username = 'root'; // Replace with your MySQL username ",
 "     $password = ''; // Replace with your MySQL password ",
 "     $dbname = 'it_life'; // Replace with the name of your MySQL database ",
 "      ",
 "     // Create connection ",
 "     $conn = mysqli_connect($servername, $username, $password, $dbname); ",
 "      ",
 "     // Check connection ",
 "     if (!$conn) { ",
 "       die('Connection failed: ' . mysqli_connect_error()); ",
 "     } ",
 "      ",
 "     if ($_SERVER['REQUEST_METHOD'] === 'POST') { ",
 "         // Save the uploaded image file ",
 "         $target_dir = 'uploads/'; ",
 "         $target_file = $target_dir . basename($_FILES['image']['name']); ",
 "         move_uploaded_file($_FILES['image']['tmp_name'], $target_file); ",
 "         $image_url = 'http://localhost/' . $target_file; ",
 "          ",
 "         // Get the other form field values ",
 "         $username = $_POST['username']; ",
 "         $phone = $_POST['phone']; ",
 "         $address = $_POST['address']; ",
 "         $city = $_POST['city']; ",
 "          ",
 "         // Insert the data into the database ",
 "         $sql = 'INSERT INTO user_profile (username, phone, address, city, image)  ",
 "                 VALUES ('$username', '$phone', '$address', '$city', '$image_url')'; ",
 "          ",
 "         if (mysqli_query($conn, $sql)) { ",
 "             // Return a success message as a JSON response ",
 "             echo json_encode(array('message' => 'Data inserted successfully')); ",
 "         } else { ",
 "             // If the query fails, return an error message as a JSON response ",
 "             echo json_encode(array('message' => 'Error inserting data: ' . mysqli_error($conn)));  ",
 "         } ",
 "     } else { ",
 "         // If the request method is not POST, return an error message as a JSON response ",
 "         echo json_encode(array('message' => 'Invalid request method')); ",
 "     } ",
 "      ",
 "     // Close the database connection ",
 "     mysqli_close($conn); ",
 "     ?> ",

  ],
    
    "description": "api post image with data in php"
  },
  // 37

  "api get data in flutter" : {
    "prefix": "-api get data in flutter",
    "scope": "dart",
    "body": [
 "     getdatafromapi() async { ",
 "       // this is a local host xamp server link ",
 "                     // can used 'http://localhost/index.php'; but the need to write with port thats from xamp control panel can view its by default 80 or 8080 ", 
 "                     // can used second method open cmd write here ipconfig to get ip address like this 192.168.43.145 to this link http://192.168.43.145/index.php ",
 "     var response = ",
 "         await http.get(Uri.parse('http://192.168.43.145/index.php')); ",
 "     var jsonResponse = jsonDecode(response.body); ",
 "     try { ",
 "       if (response.statusCode == 200) { ",
 "         return jsonResponse; ",
 "       } ",
 "       debugPrint(jsonResponse.toString()); ",
 "       return null; ",
 "     } catch (e) { ",
 "       debugPrint('${e.toString()} -----try catch-----'); ",
 "     } ",
 "   } ",
 "   /// 2: call in future builder by function name and if need also list the list view Builder ",

  ],
    
    "description": "api get data in flutter"
  },
  // 38

  "auto search with design and api" : {
    "prefix": "-auto search with design and api",
    "scope": "dart",
    "body": [
 "     FutureBuilder( ",
 " // can used future builder if by api or can used a manual list ",
 "     future: callcitylistf(), ",
 "     builder: (BuildContext context, AsyncSnapshot snapshot) { ",
 "       if (snapshot.hasData) { ",
 "         final citiesData = snapshot.data[0]['cities']; ",
 "         List<String> cityList = []; ",
 "         for (var city in citiesData) { ",
 "           cityList.add(city['city_name']); ",
 "         } ",
 "         return Autocomplete( ",
 "           fieldViewBuilder: (BuildContext context, ",
 "               TextEditingController textEditingController, ",
 "               FocusNode focusNode, ",
 "               VoidCallback onFieldSubmitted) { ",
 "             return TextField( ",
 "               decoration: const InputDecoration( ",
 "                 hintText: 'Choose City', ",
 "                 prefixIcon: Icon(Icons.search), ",
 "                 border: InputBorder.none, ",
 "               ), ",
 "               controller: textEditingController, ",
 "               focusNode: focusNode, ",
 "               onSubmitted: (String value) { ",
 "                 onFieldSubmitted(); ",
 "               }, ",
 "             ); ",
 "           }, ",
 "           optionsBuilder: (TextEditingValue getedval) { ",
 "             if (getedval.text.isEmpty) { ",
 "               return const Iterable<String>.empty(); ",
 "             } ",
 "             if (getedval.text.length == 1) { ",
 "               return cityList; ",
 "             } ",
 "             return cityList.where( ",
 "               (String item) { ",
 "                 return item ",
 "                     .toLowerCase() ",
 "                     .startsWith(getedval.text.toLowerCase()); ",
 "               }, ",
 "             ); ",
 "           }, ",
 "           optionsViewBuilder: (BuildContext context, ",
 "               AutocompleteOnSelected<String> onSelected, ",
 "               Iterable<String> options) { ",
 "             return CupertinoScrollbar( ",
 "                 child: ListView( ",
 "               padding: EdgeInsets.zero, ",
 "               shrinkWrap: true, ",
 "               children: options.map((String option) { ",
 "                 return Padding( ",
 "                   padding: const EdgeInsets.only( ",
 "                     left: 5.0, ",
 "                     top: 1, ",
 "                     right: 20, ",
 "                     bottom: 1, ",
 "                   ), ",
 "                   child: ClipRRect( ",
 "                     borderRadius: BorderRadius.circular(10), ",
 "                     child: Container( ",
 "                       decoration: BoxDecoration(boxShadow: [ ",
 "                         BoxShadow( ",
 "                           color: Colors.blueGrey.withOpacity(0.3), ",
 "                           offset: const Offset(0.3, 0.3), ",
 "                           blurRadius: 10, ",
 "                         ), ",
 "                       ]), ",
 "                       child: CupertinoListTile( ",
 "                         backgroundColor: Colors.orange.shade100, ",
 "                         title: Text(option), ",
 "                         onTap: () { ",
 "                           setState(() { ",
 "                             selectedcity = option; ",
 "                           }); ",
 "                           onSelected(option); ",
 "                         }, ",
 "                       ), ",
 "                     ), ",
 "                   ), ",
 "                 ); ",
 "               }).toList(), ",
 "             )); ",
 "           }, ",
 "           onSelected: (String item) { ",
 "             debugPrint('Selected item: $item'); ",
 "           }, ",
 "         ); ",
 "       } else if (snapshot.hasError) { ",
 "         return const Text(''); ",
 "         // return Text('Error: ${snapshot.error}'); ",
 "       } else { ",
 "         return const CircularProgressIndicator(); ",
 "       } ",
 "     }, ",
 "   ), ",
      

  ],
    
    "description": "auto search with design and api"
  },



 // 39

 "Snack Bar ornage design 3D shape" : {
  "prefix": "-Snack Bar ornage design 3D shape",
  "scope": "dart",
  "body": [
 "    final snackBar = SnackBar( ",
 "    margin: const EdgeInsets.only( ",
 "        bottom: 20.0, left: 20.0, right: 20.0, top: 10), ",
 "    backgroundColor: Colors.orange, ",
 "    content: const Text( ",
 "      'message', ",
 "      style: TextStyle( ",
 "        color: Colors.black, ",
 "      ), ",
 "    ), ",
 "    elevation: 100, ",
 "    dismissDirection: DismissDirection.horizontal, ",
 "    behavior: SnackBarBehavior.floating, ",
 "    shape: BeveledRectangleBorder( ",
 "      borderRadius: BorderRadius.circular(10), ",
 "      side: BorderSide( ",
 "        color: Colors.orange.shade300, ",
 "        width: 2.0, ",
 "        style: BorderStyle.solid, ",
 "        strokeAlign: 2.3, ",
 "      ), ",
 "    ), ",
 "    action: SnackBarAction( ",
 "      label: 'Undo', ",
 "      textColor: Colors.deepOrange, ",
 "      onPressed: () { ",
 "        // Add your undo logic here ",
 "      }, ",
 "    ), ",
 "  ); ",
 "  // ignore: use_build_context_synchronously ",
 "  ScaffoldMessenger.of(context).showSnackBar(snackBar); ",
],
  
  "description": "Show Snack Bar ornage design 3D shape"
},
 // 40

 "snackbar simple" : {
  "prefix": "-snackbar simple",
  "scope": "dart",
  "body": [
  "  ScaffoldMessenger.of(context).showSnackBar( ",
  "         SnackBar( ",
  "           content: ",
  "               Text('message'),  ",
  "           duration: const Duration(seconds: 5), ",
  "           action: SnackBarAction( ",
  "             label: 'Undo', ",
  "             onPressed: () { ",
  "               // Perform undo operation ",
  "             }, ",
  "           ), ",
  "         ), ",
  "       ); ",
],
  
  "description": "snackbar simple"
},

 // 41

 "glitch effect widget" : {
  "prefix": "-glitch widget effect",
  "scope": "dart",
  "body": [
    " // its paste in to anothers unique file to call this widget where to show wrap its by its class anme ",
  "   import 'dart:async'; ",
  "   import 'dart:math' as math; ",
  "   import 'dart:math'; ",
  "    ",
  "   import 'package:flutter/material.dart'; ",
  "    ",
  "   class GlithEffect extends StatefulWidget { ",
  "     const GlithEffect({super.key, required this.child}); ",
  "    ",
  "     final Widget child; ",
  "    ",
  "     @override ",
  "     // ignore: library_private_types_in_public_api ",
  "     _GlithEffectState createState() => _GlithEffectState(); ",
  "   } ",
  "    ",
  "   class _GlithEffectState extends State<GlithEffect> ",
  "       with SingleTickerProviderStateMixin { ",
  "     late GlitchController _controller; ",
  "     late Timer _timer; ",
  "    ",
  "     @override ",
  "     void initState() { ",
  "       _controller = GlitchController( ",
  "         duration: const Duration( ",
  "           milliseconds: 400, ",
  "         ), ",
  "       ); ",
  "    ",
  "       _timer = Timer.periodic( ",
  "         const Duration(seconds: 3), ",
  "         (_) { ",
  "           _controller ",
  "             ..reset() ",
  "             ..forward(); ",
  "         }, ",
  "       ); ",
  "       super.initState(); ",
  "     } ",
  "    ",
  "     @override ",
  "     void dispose() { ",
  "       super.dispose(); ",
  "       _timer.cancel(); ",
  "       _controller.dispose(); ",
  "     } ",
  "    ",
  "     @override ",
  "     Widget build(BuildContext context) { ",
  "       return AnimatedBuilder( ",
  "           animation: _controller, ",
  "           builder: (_, __) { ",
  "             late var color = getRandomColor().withOpacity(0.5); ",
  "             if (!_controller.isAnimating) { ",
  "               return widget.child; ",
  "             } ",
  "             return Stack( ",
  "               children: [ ",
  "                 if (random.nextBool()) _clipedChild, ",
  "                 Transform.translate( ",
  "                   offset: randomOffset, ",
  "                   child: ShaderMask( ",
  "                     shaderCallback: (Rect bounds) { ",
  "                       return LinearGradient( ",
  "                         colors: <Color>[ ",
  "                           color, ",
  "                           color, ",
  "                         ], ",
  "                       ).createShader(bounds); ",
  "                     }, ",
  "                     blendMode: BlendMode.srcATop, ",
  "                     child: _clipedChild, ",
  "                   ), ",
  "                 ), ",
  "               ], ",
  "             ); ",
  "           }); ",
  "     } ",
  "    ",
  "     Offset get randomOffset => Offset( ",
  "           (random.nextInt(10) - 5).toDouble(), ",
  "           (random.nextInt(10) - 5).toDouble(), ",
  "         ); ",
  "     Widget get _clipedChild => ClipPath( ",
  "           clipper: GlitchClipper(), ",
  "           child: widget.child, ",
  "         ); ",
  "    ",
  "     getRandomColor() => [ ",
  "           Colors.blueAccent, ",
  "           Colors.redAccent, ",
  "           Colors.greenAccent, ",
  "         ][Random().nextInt(3)]; ",
  "   } ",
  "    ",
  "   var random = math.Random(); ",
  "    ",
  "   class GlitchClipper extends CustomClipper<Path> { ",
  "     final deltaMax = 15; ",
  "     final min = 3; ",
  "    ",
  "     @override ",
  "     getClip(Size size) { ",
  "       var path = Path(); ",
  "       var y = randomStep; ",
  "       while (y < size.height) { ",
  "         var yRandom = randomStep; ",
  "         var x = randomStep; ",
  "    ",
  "         while (x < size.width) { ",
  "           var xRandom = randomStep; ",
  "           path.addRect( ",
  "             Rect.fromPoints( ",
  "               Offset(x, y.toDouble()), ",
  "               Offset(x + xRandom, y + yRandom), ",
  "             ), ",
  "           ); ",
  "           x += randomStep * 2; ",
  "         } ",
  "         y += yRandom; ",
  "       } ",
  "    ",
  "       path.close(); ",
  "       return path; ",
  "     } ",
  "    ",
  "     double get randomStep => min + random.nextInt(deltaMax).toDouble(); ",
  "    ",
  "     @override ",
  "     bool shouldReclip(covariant CustomClipper oldClipper) => true; ",
  "   } ",
  "    ",
  "   class GlitchController extends Animation<int> ",
  "       with ",
  "           AnimationEagerListenerMixin, ",
  "           AnimationLocalListenersMixin, ",
  "           AnimationLocalStatusListenersMixin { ",
  "     GlitchController({ ",
  "       required this.duration, ",
  "     }); ",
  "    ",
  "     late Duration duration; ",
  "     late List<Timer> _timers = []; ",
  "     late bool isAnimating = false; ",
  "    ",
  "     forward() { ",
  "       isAnimating = true; ",
  "       var oneStep = (duration.inMicroseconds / 3).round(); ",
  "       _status = AnimationStatus.forward; ",
  "       _timers = [ ",
  "         Timer( ",
  "           Duration(microseconds: oneStep), ",
  "           () => setValue(1), ",
  "         ), ",
  "         Timer( ",
  "           Duration(microseconds: oneStep * 2), ",
  "           () => setValue(2), ",
  "         ), ",
  "         Timer( ",
  "           Duration(microseconds: oneStep * 3), ",
  "           () => setValue(3), ",
  "         ), ",
  "         Timer( ",
  "           Duration(microseconds: oneStep * 4), ",
  "           () { ",
  "             _status = AnimationStatus.completed; ",
  "             isAnimating = false; ",
  "             notifyListeners(); ",
  "           }, ",
  "         ), ",
  "       ]; ",
  "     } ",
  "    ",
  "     setValue(value) { ",
  "       _value = value; ",
  "       notifyListeners(); ",
  "     } ",
  "    ",
  "     reset() { ",
  "       _status = AnimationStatus.dismissed; ",
  "       _value = 0; ",
  "     } ",
  "    ",
  "     @override ",
  "     void dispose() { ",
  "       // ignore: avoid_function_literals_in_foreach_calls ",
  "       _timers.forEach((timer) => timer.cancel()); ",
  "       super.dispose(); ",
  "     } ",
  "    ",
  "     @override ",
  "     AnimationStatus get status => _status; ",
  "     late AnimationStatus _status; ",
  "    ",
  "     @override ",
  "     int get value => _value; ",
  "     late int _value; ",
  "   } ",
    
],
  
  "description": "show glitch widget effect on any type nof widget"
},
 // 42

 "card for post" : {
  "prefix": "-card for post",
  "scope": "dart",
  "body": [
"    its paste in a single file ",
"    import 'package:flutter/material.dart'; ",
" ",
"    class BuyCard extends StatelessWidget { ",
"      final String image; ",
"      final String banner; ",
"      final String crunceytype; ",
"      final String price; ",
"      final String fixedornot; ",
"     ",
"      final String agewieghts; ",
"      final String postedtime; ",
"      final String country; ",
"      final String city; ",
"      final Function() onShareTap; ",
"      final Function() sellercallnotap; ",
"      final Function() sellerwhatsappnotap; ",
"      final String sellername; ",
"      // final int sellercallno; ",
"      // final int sellerwhatsappno; ",
"     ",
"      // final String subInfoTitle; ",
"      // final String subInfoText; ",
"      final Widget subIcon; ",
"     ",
"      const BuyCard( ",
"          {this.image = 'assets/cow.png', ",
"          this.banner = 'On Sell', ",
"          this.crunceytype = 'Rs: ', ",
"          required this.price, ",
"          this.fixedornot = 'Fixed', ",
"          this.agewieghts = '''Lorem ipsum dolor sit amet consectetur''',  ",
"          this.postedtime = '04/29/2023', ",
"          this.country = 'Pakistan', ",
"          this.city = 'Lahore', ",
"          this.sellername = 'Name', ",
"          // this.sellercallno = 123, ",
"          // this.sellerwhatsappno = 123, ",
"          required this.onShareTap, ",
"          required this.sellercallnotap, ",
"          required this.sellerwhatsappnotap, ",
"          this.subIcon = const CircleAvatar( ",
"            backgroundColor: Colors.orange, ",
"            radius: 17, ",
"            child: Icon( ",
"              Icons.person_4_rounded, ",
"              color: Colors.white, ",
"            ), ",
"          ), ",
"          // this.subInfoTitle = 'Name', ",
"          // this.subInfoText = 'Pakistan', ",
"          Key? key}) ",
"          : super(key: key); ",
"     ",
"      @override ",
"      Widget build(BuildContext context) { ",
"        return Container( ",
"          padding: const EdgeInsets.all(10.0), ",
"          decoration: BoxDecoration( ",
"              borderRadius: BorderRadius.circular(25.0), ",
"              boxShadow: [ ",
"                BoxShadow( ",
"                  color: Colors.black.withOpacity(.05), ",
"                  offset: const Offset(0, 10), ",
"                  blurRadius: 0, ",
"                  spreadRadius: 0, ",
"                ) ",
"              ], ",
"              gradient: const RadialGradient( ",
"                colors: [Colors.orangeAccent, Colors.orange], ",
"                focal: Alignment.topCenter, ",
"                radius: 0.85, ",
"              )), ",
"          child: Column( ",
"            crossAxisAlignment: CrossAxisAlignment.start, ",
"            mainAxisSize: MainAxisSize.min, ",
"            children: [ ",
"              Container( ",
"                height: MediaQuery.of(context).size.height * 0.3 / 1, ",
"                width: MediaQuery.of(context).size.width * 0.9 / 1, ",
"                decoration: BoxDecoration( ",
"                  color: Colors.deepOrangeAccent.withOpacity(0.3), ",
"                  borderRadius: const BorderRadius.all(Radius.circular(22)), ",
"                  // color: Colors.red ",
"                ), ",
"                clipBehavior: Clip.antiAlias, ",
"                child: Banner( ",
"                  message: banner, ",
"                  location: BannerLocation.topStart, ",
"                  color: Colors.orange, ",
"                  child: Image.network( ",
"                    image, ",
"                    fit: BoxFit.fitWidth, ",
"                  ), ",
"                ), ",
"              ), ",
"              const SizedBox( ",
"                height: 10, ",
"              ), ",
"              Row( ",
"                mainAxisAlignment: MainAxisAlignment.spaceBetween, ",
"                children: [ ",
"                  Row( ",
"                    children: [ ",
"                      Text( ",
"                        crunceytype, ",
"                        style: const TextStyle( ",
"                            color: Colors.white60, ",
"                            fontWeight: FontWeight.bold, ",
"                            fontSize: 26), ",
"                      ), ",
"                      Text( ",
"                        price, ",
"                        style: const TextStyle( ",
"                            color: Colors.white, ",
"                            fontSize: 26, ",
"                            fontWeight: FontWeight.bold), ",
"                      ), ",
"                      const SizedBox( ",
"                        width: 4, ",
"                      ), ",
"                      Transform.scale( ",
"                        scale: 0.7, ",
"                        child: const Icon( ",
"                          Icons.sell, ",
"                          color: Colors.white60, ",
"                        ), ",
"                      ), ",
"                    ], ",
"                  ), ",
"                  Container( ",
"                    width: 100, ",
"                    height: 25, ",
"                    decoration: BoxDecoration( ",
"                      borderRadius: BorderRadius.circular(100.0), ",
"                      gradient: const LinearGradient(colors: [ ",
"                        Color.fromARGB(255, 223, 218, 212), ",
"                        Colors.white ",
"                      ], begin: Alignment.centerLeft, end: Alignment.bottomCenter), ",
"                    ), ",
"                    child: Center( ",
"                      child: Text( ",
"                        fixedornot, ",
"                        style: const TextStyle(color: Colors.orange), ",
"                      ), ",
"                    ), ",
"                  ), ",
"                ], ",
"              ), ",
"              const SizedBox(height: 10), ",
"              Text( ",
"                agewieghts, ",
"                style: ",
"                    TextStyle(color: Colors.white.withOpacity(.75), fontSize: 14), ",
"              ), ",
"              Row( ",
"                mainAxisAlignment: MainAxisAlignment.spaceBetween, ",
"                children: [ ",
"                  const SizedBox(), ",
"                  Text( ",
"                    postedtime, ",
"                    textAlign: TextAlign.right, ",
"                    style: const TextStyle(fontSize: 12, color: Colors.black45), ",
"                  ), ",
"                ], ",
"              ), ",
"              SizedBox( ",
"                height: 40, ",
"                child: Row( ",
"                  mainAxisAlignment: MainAxisAlignment.spaceBetween, ",
"                  children: [ ",
"                    Row( ",
"                      children: [ ",
"                        const CircleAvatar( ",
"                          backgroundColor: Colors.orangeAccent, ",
"                          radius: 16, ",
"                          child: Icon(Icons.location_on), ",
"                        ), ",
"                        const SizedBox( ",
"                          width: 5, ",
"                        ), ",
"                        Text( ",
"                          country, ",
"                          style: ",
"                              const TextStyle(fontSize: 10, color: Colors.black45), ",
"                        ), ",
"                        const SizedBox( ",
"                          width: 5, ",
"                        ), ",
"                        const Text( ",
"                          '|', ",
"                          style: TextStyle( ",
"                              color: Color.fromARGB(255, 140, 154, 161), ",
"                              fontSize: 15, ",
"                              fontWeight: FontWeight.w300), ",
"                        ), ",
"                        const SizedBox( ",
"                          width: 5, ",
"                        ), ",
"                        Text( ",
"                          city, ",
"                          style: const TextStyle(fontSize: 13), ",
"                        ), ",
"                      ], ",
"                    ), ",
"                    // subtitle: Text('lahore'), ",
"                    IconButton( ",
"                        onPressed: onShareTap, icon: const Icon(Icons.share)), ",
"                  ], ",
"                ), ",
"              ), ",
"              // const SizedBox(height: 15), ",
"     ",
"              Container( ",
"                width: double.infinity, ",
"                height: 60, ",
"                decoration: BoxDecoration( ",
"                  borderRadius: BorderRadius.circular(25.0), ",
"                  color: Colors.white, ",
"                ), ",
"                child: Padding( ",
"                  padding: const EdgeInsets.all(8.0), ",
"                  child: Row( ",
"                    mainAxisAlignment: MainAxisAlignment.spaceBetween, ",
"                    children: [ ",
"                      Row( ",
"                        children: [ ",
"                          subIcon, ",
"                          const SizedBox(width: 10), ",
"                          Text( ",
"                            sellername, ",
"                            style: const TextStyle( ",
"                              color: Colors.orange, ",
"                              fontSize: 17, ",
"                              fontWeight: FontWeight.bold, ",
"                            ), ",
"                          ), ",
"                        ], ",
"                      ), ",
"                      Row( ",
"                        children: [ ",
"                          TextButton.icon( ",
"                              onPressed: sellercallnotap, ",
"                              label: const Text('Call'), ",
"                              icon: const Icon(Icons.call_outlined)), ",
"                          const Text( ",
"                            '|', ",
"                            style: TextStyle( ",
"                                color: Color.fromARGB(255, 194, 206, 212), ",
"                                fontSize: 40, ",
"                                fontWeight: FontWeight.w100), ",
"                          ), ",
"                          Transform.scale( ",
"                            scale: 0.7, ",
"                            child: InkWell( ",
"                              onTap: sellerwhatsappnotap, ",
"                              child: CircleAvatar( ",
"                                backgroundColor: Colors.lightGreen, ",
"                                child: Padding( ",
"                                  padding: const EdgeInsets.all(2.0), ",
"                                  child: Image.asset( ",
"                                    'assets/whatsapp.png', ",
"                                    scale: 1.9, ",
"                                    fit: BoxFit.contain, ",
"                                  ), ",
"                                ), ",
"                              ), ",
"                            ), ",
"                          ), ",
"                        ], ",
"                      ), ",
"                    ], ",
"                  ), ",
"                ), ",
"              ), ",
"            ], ",
"          ), ",
"        ); ",
"      } ",
"    } ",
    
],
  
  "description": "card for post orange type"
},

 // 43

 "permisision for internet" : {
  "prefix": "-permisision for internet in android AndroidManifest.xml",
  "scope": "dart,xml",
  "body": [
 " <uses-permission android:name='android.permission.INTERNET' /> ",
 " //paste it befor application tags",
 " <application ",
],
  
  "description": "permisision for internet in android AndroidManifest.xml"
},
 // 44

 "dropdown from api" : {
  "prefix": "-dropdown from api",
  "scope": "dart",
  "body": [
    " // pastte in single file",
 "    import 'package:flutter/material.dart'; ",
 " ",
 "    class MyWidget extends StatefulWidget { ",
 "      @override ",
 "      _MyWidgetState createState() => _MyWidgetState(); ",
 "    } ",
 "     ",
 "    class _MyWidgetState extends State<MyWidget> { ",
 "      Future<List<String>> _childrenFuture; ",
 "      String _selectedChild; ",
 "     ",
 "      @override ",
 "      void initState() { ",
 "        super.initState(); ",
 "        _childrenFuture = _getChildren(); // call your API to get the list of children here  ",
 "      } ",
 "     ",
 "      Future<List<String>> _getChildren() async { ",
 "        // make API request to get children data ",
 "        // return list of children strings ",
 "      } ",
 "     ",
 "      @override ",
 "      Widget build(BuildContext context) { ",
 "        return Scaffold( ",
 "          appBar: AppBar( ",
 "            title: Text('Dropdown of Children'), ",
 "          ), ",
 "          body: Center( ",
 "            child: FutureBuilder<List<String>>( ",
 "              future: _childrenFuture, ",
 "              builder: (context, snapshot) { ",
 "                if (snapshot.hasData) { ",
 "                  return DropdownButton<String>( ",
 "                    value: _selectedChild, ",
 "                    onChanged: (newValue) { ",
 "                      setState(() { ",
 "                        _selectedChild = newValue; ",
 "                      }); ",
 "                    }, ",
 "                    items: snapshot.data ",
 "                        .map((value) => DropdownMenuItem<String>( ",
 "                              value: value, ",
 "                              child: Text(value), ",
 "                            )) ",
 "                        .toList(), ",
 "                  ); ",
 "                } else if (snapshot.hasError) { ",
 "                  return Text('Error: ${snapshot.error}'); ",
 "                } else { ",
 "                  return CircularProgressIndicator(); ",
 "                } ",
 "              }, ",
 "            ), ",
 "          ), ",
 "        ); ",
 "      } ",
 "    } ",
    
],
  
  "description": "dropdown from api"
},
 // 45

 "map list from children" : {
  "prefix": "-map list from children",
  "scope": "dart",
  "body": [
 "    items: snapshot.data ",
 "    .map((value) => DropdownMenuItem<String>( ",
 "          value: value, ",
 "          child: Text(value), ",
 "        )) ",
 "    .toList(), ",
],
  
  "description": "map list from children and api or manual static list"
},
 // 46

 "email directly with smtp" : {
  "prefix": "-email directly with smtp",
  "scope": "dart",
  "body": [
 "// Step 1 ",
 "// Add Package ",
 "mailer: ^6.0.0 ",
 " ",
 "// Step 2 ",
 "// Import it ",
 "   import 'package:mailer/mailer.dart'; ",
 " ",
 "// Step 3 ",
 "// Add two step verification in your Gmail Account ",
 "   Click on Profile Pic on your Browser. ",
 "   Click on Manage your Account. ",
 "   Go to Security. ",
 "   Go to 2 Step Verification. ",
 "   Go to App Passwords on the most below. ",
 "   Select Mail and Select Windows Computer. ",
 "   Click on Generate. ",
 "   Copy Password. ",
 " ",
 "// Step 4 ",
 "   Add following Function sendMail in On Press of Button. ",
 "     void sendMail( ",
 "      {required String recipientEmail, required String mailMessage}) async {  ",
 "    String username = 'demo@gmail.com'; ",
 "    String password = 'paste above copied password here'; ",
 "    final smtpServer = gmail(username, password); ",
 "    final message = Message() ",
 "      ..from = Address(username, 'Mail Service') ",
 "      ..recipients.add(recipientEmail) ",
 "      ..subject = 'Mail' ",
 "      ..text = 'Message: $mailMessage'; ",
 " ",
 "    try { ",
 "      await send(message, smtpServer); ",
 "    } catch (e) { ",
 "      print(e.toString()); ",
 "    } ",
 "  } ",
],
  
  "description": "email directly with smtp"
},
 // 47

 "otp email directly" : {
  "prefix": "-otp email directly",
  "scope": "dart",
  "body": [
 "// Add Package ",
 "email_otp: ^1.0.4 ",
 "// Import  ",
 "import 'package:email_otp/email_otp.dart'; ",
 "// Create Object ",
 "EmailOTP myauth = EmailOTP(); ",
 "// Creating Text Fields. ",
 "  TextEditingController email = new TextEditingController(); ",
 "  TextEditingController otp = new TextEditingController(); ",
 "// Configure Object ",
 "myauth.setConfig( ",
 "                            appEmail: 'me@rohitchouhan.com', ",
 "                            appName: 'Email OTP', ",
 "                            userEmail: email.text, ",
 "                            otpLength: 6, ",
 "                            otpType: OTPType.digitsOnly ",
 "                          ); ",
 " ",
 "// Check OTP has sent or not. ",
 " if (await myauth.sendOTP() == true) { ",
 "                            ScaffoldMessenger.of(context) ",
 "                                .showSnackBar(const SnackBar( ",
 "                              content: Text('OTP has been sent'), ",
 "                            )); ",
 "                          } else { ",
 "                            ScaffoldMessenger.of(context) ",
 "                                .showSnackBar(const SnackBar( ",
 "                              content: Text('Oops, OTP send failed'), ",
 "                            )); ",
 "                          } ",
 " ",
 "// Complete send OTP Button Code ",
 "ElevatedButton( ",
 "                        onPressed: () async { ",
 "                          myauth.setConfig( ",
 "                            appEmail: 'me@rohitchouhan.com', ",
 "                            appName: 'Email OTP', ",
 "                            userEmail: email.text, ",
 "                            otpLength: 6, ",
 "                            otpType: OTPType.digitsOnly ",
 "                          ); ",
 "                          if (await myauth.sendOTP() == true) { ",
 "                            ScaffoldMessenger.of(context) ",
 "                                .showSnackBar(const SnackBar( ",
 "                              content: Text('OTP has been sent'), ",
 "                            )); ",
 "                          } else { ",
 "                            ScaffoldMessenger.of(context) ",
 "                                .showSnackBar(const SnackBar( ",
 "                              content: Text('Oops, OTP send failed'), ",
 "                            )); ",
 "                          } ",
 "                        }, ",
 "                        child: const Text('Send OTP')), ",
 " ",
 "// Check OTP verified or not ",
 "if (await myauth.verifyOTP(otp: otp.text) == true) { ",
 "                            ScaffoldMessenger.of(context) ",
 "                                .showSnackBar(const SnackBar( ",
 "                              content: Text('OTP is verified'), ",
 "                            )); ",
 "                          } else { ",
 "                            ScaffoldMessenger.of(context) ",
 "                                .showSnackBar(const SnackBar( ",
 "                              content: Text('Invalid OTP'), ",
 "                            )); ",
 "                          } ",
 "                           ",
 "// Complete OTP Verification button Code ",
 "ElevatedButton( ",
 "                        onPressed: () async { ",
 "                          if (await myauth.verifyOTP(otp: otp.text) == true) {  ",
 "                            ScaffoldMessenger.of(context) ",
 "                                .showSnackBar(const SnackBar( ",
 "                              content: Text('OTP is verified'), ",
 "                            )); ",
 "                          } else { ",
 "                            ScaffoldMessenger.of(context) ",
 "                                .showSnackBar(const SnackBar( ",
 "                              content: Text('Invalid OTP'), ",
 "                            )); ",
 "                          } ",
 "                        }, ",
 "                        child: const Text('Verify')), ",

],
  
  "description": "otp email directly"
},
 // 48

 "unfocus on text input feilds" : {
  "prefix": "-unfocus on text input feilds",
  "scope": "dart",
  "body": [
 " // un focusd on text input field by on pressed ",
 " primaryFocus!.unfocus(disposition: UnfocusDisposition.scope); ",
],
  
  "description": "unfocus on text input feilds"
},

 // 49

 "Provider example" : {
  "prefix": "-Provider example",
  "scope": "dart",
  "body": [
 "    // if single provider class ",
 "    runApp( ",
 "    ChangeNotifierProvider(create: (_) => ClassNamep(), ",
 "    child:  const MaterialApp( ",
 "    // if mulilevel provider class can be called ",
 "  MultiProvider( ",
  "providers: [ ",
  "  ChangeNotifierProvider(create: (_) => ProviderClass()), ",
  "  ChangeNotifierProvider(create: (_) => SliderProvider()), ",
  " ], ",
  " child: MaterialApp( ",
 " ",
 "    //// this is a backend code thats returned a value by extended ChangeNotifier ",
 "    import 'package:flutter/cupertino.dart'; ",
 " ",
 "class ClassNamep with ChangeNotifier { ",
 "  int _count = 0; ",
 "  int get count => _count; ",
 " ",
 "void  setCount() { ",
 "    _count++; ",
 "    notifyListeners(); ",
 "  } ",
 "} ",
 "////// in initial state or in var call the changenotifr class ",
 "///// if listen true then its get data every time or false only for one time when initial state   ",
 "final countProvider = Provider.of<ClassNamep>(context, listen: false); ",
 "//// call by consumer or can directly by this name countProvider.count ",
 "Consumer<ClassNamep>( ",
 "              builder: (context, value, child) { ",
 "                print('Only Count Widget Building'); ",
 "                return Text( ",
 "                  value.count.toString(), ",
 "                  style: const TextStyle( ",
 "                      fontSize: 30, fontWeight: FontWeight.w500), ",
 "                ); ",
 "              }, ",
 "            ) ",
 "   // and call counter funtion   ",
 "   onPressed: () { ",
 "     countProvider.setCount(); ",
 " }, ",
  
            
],
  
  "description": "Provider example"
},

 // 50

 "navigation with animation fadeTransition" : {
  "prefix": "-navigation with animation fadeTransition",
  "scope": "dart",
  "body": [
 "    Navigator.of(context).pushReplacement( ",
 "    PageRouteBuilder( ",
 "      transitionDuration: const Duration(seconds: 3), ",
 "      pageBuilder: (context, animation, secondaryAnimation) => ",
 "          const Login(), ",
 "      transitionsBuilder: ",
 "          (context, animation, secondaryAnimation, child) => ",
 "              FadeTransition( ",
 "        opacity: animation, ",
 "        child: child, ",
 "      ), ",
 "    ), ",
 "  ); ",
],
  
  "description": "navigation with animation fadeTransition"
},
 // 51

 "navigation with animation CurvedAnimation tween" : {
  "prefix": "-navigation with animation CurvedAnimation tween",
  "scope": "dart",
  "body": [
    "    Navigator.of(context).pushReplacement( ",
    "    PageRouteBuilder( ",
    "      transitionDuration: const Duration(seconds: 2), ",
    "      pageBuilder: (context, animation, secondaryAnimation) =>  ",
    "          const Home(), ",
    "      transitionsBuilder: ",
    "          (context, animation, secondaryAnimation, child) { ",
    "        final tween = Tween<double>(begin: 0.0, end: 1.0); ",
    "        final curve = CurvedAnimation( ",
    "          parent: animation, ",
    "          curve: Curves.bounceInOut, ",
    "        ); ",
    "        return ScaleTransition( ",
    "          scale: tween.animate(curve), ",
    "          child: child, ",
    "        ); ",
    "      }, ",
    "    ), ",
    "  ); ",
],
  
  "description": "navigation with animation CurvedAnimation with tween"
},
 // 52

 "login signup page with terms pages" : {
  "prefix": "-login signup page with terms pages",
  "scope": "dart",
  "body": [
 " // its paste in a single page ",
 " import 'package:chemicals/homepage.dart'; ",
 " import 'package:chemicals/terms.dart'; ",
 " import 'package:flutter/material.dart'; ",
 " import 'package:flutter/services.dart'; ",
 "  ",
 " class Login extends StatefulWidget { ",
 "   const Login({Key? key}) : super(key: key); ",
 "  ",
 "   @override ",
 "   State<Login> createState() => _LoginState(); ",
 " } ",
 "  ",
 " class _LoginState extends State<Login> { ",
 "   @override ",
 "   void initState() { ",
 "     loadsui(); ",
 "     super.initState(); ",
 "   } ",
 "  ",
 "   loadsui() { ",
 "     return const SystemUiOverlayStyle( ",
 "         statusBarColor: Colors.white, ",
 "         statusBarIconBrightness: Brightness.dark, ",
 "         systemNavigationBarColor: Color.fromARGB(255, 255, 255, 255), ",
 "         systemNavigationBarIconBrightness: Brightness.dark); ",
 "   } ",
 "  ",
 "   TextEditingController loginnamecont = TextEditingController(); ",
 "   TextEditingController loginpasscont = TextEditingController(); ",
 "  ",
 "   @override ",
 "   void dispose() { ",
 "     loadsui(); ",
 "     super.dispose(); ",
 "   } ",
 "  ",
 "   @override ",
 "   Widget build(BuildContext context) { ",
 "     return WillPopScope( ",
 "       onWillPop: () async { ",
 "         return false; ",
 "       }, ",
 "       child: Scaffold( ",
 "         appBar: AppBar( ",
 "           systemOverlayStyle: loadsui(), ",
 "           leading: const Text(' '), ",
 "           backgroundColor: Colors.transparent, ",
 "           elevation: 0, ",
 "         ), ",
 "         body: Padding( ",
 "           padding: const EdgeInsets.all(14.0), ",
 "           child: ListView( ",
 "             children: [ ",
 "               const ListTile( ",
 "                   contentPadding: EdgeInsets.all(0), ",
 "                   title: Text( ",
 "                     'Login', ",
 "                     style: TextStyle( ",
 "                         color: Colors.black, ",
 "                         fontSize: 23, ",
 "                         fontFamily: 'clight', ",
 "                         fontWeight: FontWeight.bold), ",
 "                   ), ",
 "                   subtitle: Text( ",
 "                     'Welcome back to our account!', ",
 "                     style: TextStyle(color: Colors.black, fontFamily: 'clight'), ",
 "                   )), ",
 "               const SizedBox(height: 17), ",
 "               TextField( ",
 "                 controller: loginnamecont, ",
 "                 decoration: InputDecoration( ",
 "                   prefixIcon: const Icon(Icons.person_3_outlined), ",
 "                   hintText: 'Name', ",
 "                   disabledBorder: OutlineInputBorder( ",
 "                       borderSide: ",
 "                           const BorderSide(width: 0.05, color: Colors.blueGrey), ",
 "                       borderRadius: BorderRadius.circular(20)), ",
 "                   border: OutlineInputBorder( ",
 "                     borderRadius: BorderRadius.circular(20), ",
 "                     borderSide: const BorderSide(width: 0.05), ",
 "                   ), ",
 "                   errorBorder: OutlineInputBorder( ",
 "                       borderSide: BorderSide( ",
 "                           width: 0.05, ",
 "                           color: Colors.deepOrange.withOpacity(0.8)), ",
 "                       borderRadius: BorderRadius.circular(20)), ",
 "                 ), ",
 "               ), ",
 "               const SizedBox(height: 16), ",
 "               TextField( ",
 "                 controller: loginpasscont, ",
 "                 decoration: InputDecoration( ",
 "                   prefixIcon: const Icon(Icons.email_outlined), ",
 "                   hintText: 'Password', ",
 "                   helperStyle: const TextStyle(fontSize: 10), ",
 "                   disabledBorder: OutlineInputBorder( ",
 "                       borderSide: ",
 "                           const BorderSide(width: 0.05, color: Colors.blueGrey), ",
 "                       borderRadius: BorderRadius.circular(20)), ",
 "                   border: OutlineInputBorder( ",
 "                     borderRadius: BorderRadius.circular(20), ",
 "                     borderSide: const BorderSide(width: 0.05), ",
 "                   ), ",
 "                   errorBorder: OutlineInputBorder( ",
 "                       borderSide: BorderSide( ",
 "                           width: 0.05, ",
 "                           color: Colors.deepOrange.withOpacity(0.8)), ",
 "                       borderRadius: BorderRadius.circular(20)), ",
 "                 ), ",
 "               ), ",
 "               const SizedBox(height: 16), ",
 "               ListTile( ",
 "                 contentPadding: const EdgeInsets.all(0), ",
 "                 trailing: Padding( ",
 "                   padding: const EdgeInsets.only(left: 8.0), ",
 "                   child: TextButton( ",
 "                       onPressed: () { ",
 "                         Navigator.push( ",
 "                           context, ",
 "                           MaterialPageRoute( ",
 "                             builder: (context) => const Forgotpasw(), ",
 "                           ), ",
 "                         ); ",
 "                       }, ",
 "                       child: const Text( ",
 "                         'Forgot Password?', ",
 "                         style: TextStyle( ",
 "                             color: Colors.black, fontFamily: 'clight'), ",
 "                       )), ",
 "                 ), ",
 "               ), ",
 "               GestureDetector( ",
 "                 onTap: () async { ",
 "                   Navigator.push( ",
 "                     context, ",
 "                     MaterialPageRoute( ",
 "                       builder: (context) => const HomePage(), ",
 "                     ), ",
 "                   ); ",
 "                 }, ",
 "                 child: Container( ",
 "                   decoration: BoxDecoration( ",
 "                       color: Colors.deepOrange, ",
 "                       borderRadius: BorderRadius.circular(20)), ",
 "                   child: const Center( ",
 "                     child: Padding( ",
 "                       padding: EdgeInsets.all(12.0), ",
 "                       child: Text('Login', ",
 "                           style: TextStyle( ",
 "                               color: Colors.white, ",
 "                               fontSize: 25, ",
 "                               fontFamily: 'cbold')), ",
 "                     ), ",
 "                   ), ",
 "                 ), ",
 "               ), ",
 "               SizedBox(height: MediaQuery.of(context).size.height * 1.3 / 4), ",
 "               Center( ",
 "                 child: Row( ",
 "                   mainAxisAlignment: MainAxisAlignment.center, ",
 "                   children: [ ",
 "                     const Text('Don`t have an account?'), ",
 "                     TextButton( ",
 "                         onPressed: () { ",
 "                           Navigator.push( ",
 "                             context, ",
 "                             MaterialPageRoute( ",
 "                               builder: (context) => const Signup(), ",
 "                             ), ",
 "                           ); ",
 "                         }, ",
 "                         child: const Text( ",
 "                           'Sign Up', ",
 "                           style: TextStyle( ",
 "                               color: Colors.black, ",
 "                               fontFamily: 'cbold', ",
 "                               fontWeight: FontWeight.bold, ",
 "                               fontSize: 17), ",
 "                         )) ",
 "                   ], ",
 "                 ), ",
 "               ), ",
 "             ], ",
 "           ), ",
 "         ), ",
 "       ), ",
 "     ); ",
 "   } ",
 " } ",
 "  ",
 " class Forgotpasw extends StatefulWidget { ",
 "   const Forgotpasw({Key? key}) : super(key: key); ",
 "  ",
 "   @override ",
 "   State<Forgotpasw> createState() => _ForgotpaswState(); ",
 " } ",
 "  ",
 " class _ForgotpaswState extends State<Forgotpasw> { ",
 "   TextEditingController getnametextcont = TextEditingController(); ",
 "   TextEditingController getsecpasstextcont = TextEditingController(); ",
 "   TextEditingController setnewpasstextcont = TextEditingController(); ",
 "  ",
 "   @override ",
 "   Widget build(BuildContext context) { ",
 "     return Scaffold( ",
 "       appBar: AppBar( ",
 "         leading: IconButton( ",
 "             onPressed: () { ",
 "               Navigator.pop(context); ",
 "             }, ",
 "             icon: const Icon( ",
 "               Icons.arrow_back_ios_new, ",
 "               color: Colors.black, ",
 "             )), ",
 "         systemOverlayStyle: const SystemUiOverlayStyle( ",
 "           statusBarColor: Colors.white, ",
 "           statusBarIconBrightness: Brightness.dark, ",
 "         ), ",
 "         backgroundColor: Colors.transparent, ",
 "         elevation: 0, ",
 "       ), ",
 "       body: Padding( ",
 "         padding: const EdgeInsets.all(14.0), ",
 "         child: ListView( ",
 "           children: [ ",
 "             const ListTile( ",
 "                 contentPadding: EdgeInsets.all(0), ",
 "                 title: Text( ",
 "                   'Forgot Password', ",
 "                   style: TextStyle( ",
 "                       color: Colors.black, ",
 "                       fontSize: 23, ",
 "                       fontFamily: 'clight', ",
 "                       fontWeight: FontWeight.bold), ",
 "                 ), ",
 "                 subtitle: Text( ",
 "                   'we need your registration secret key for reset password', ",
 "                   style: TextStyle(color: Colors.black, fontFamily: 'clight'), ",
 "                 )), ",
 "             const SizedBox(height: 16), ",
 "             TextField( ",
 "               controller: getnametextcont, ",
 "               decoration: InputDecoration( ",
 "                 prefixIcon: const Icon(Icons.person_outline_rounded), ",
 "                 hintText: 'Name', ",
 "                 helperStyle: const TextStyle(fontSize: 10), ",
 "                 disabledBorder: OutlineInputBorder( ",
 "                     borderSide: ",
 "                         const BorderSide(width: 0.05, color: Colors.blueGrey), ",
 "                     borderRadius: BorderRadius.circular(23)), ",
 "                 border: OutlineInputBorder( ",
 "                   borderRadius: BorderRadius.circular(23), ",
 "                   borderSide: const BorderSide(width: 0.05), ",
 "                 ), ",
 "                 errorBorder: OutlineInputBorder( ",
 "                     borderSide: BorderSide( ",
 "                         width: 0.05, color: Colors.deepOrange.withOpacity(0.8)), ",
 "                     borderRadius: BorderRadius.circular(23)), ",
 "               ), ",
 "             ), ",
 "             const SizedBox(height: 16), ",
 "             TextField( ",
 "               controller: getsecpasstextcont, ",
 "               decoration: InputDecoration( ",
 "                 prefixIcon: const Icon(Icons.password_outlined), ",
 "                 hintText: 'Secret Key', ",
 "                 helperStyle: const TextStyle(fontSize: 10), ",
 "                 disabledBorder: OutlineInputBorder( ",
 "                     borderSide: ",
 "                         const BorderSide(width: 0.05, color: Colors.blueGrey), ",
 "                     borderRadius: BorderRadius.circular(23)), ",
 "                 border: OutlineInputBorder( ",
 "                   borderRadius: BorderRadius.circular(23), ",
 "                   borderSide: const BorderSide(width: 0.05), ",
 "                 ), ",
 "                 errorBorder: OutlineInputBorder( ",
 "                     borderSide: BorderSide( ",
 "                         width: 0.05, color: Colors.deepOrange.withOpacity(0.8)), ",
 "                     borderRadius: BorderRadius.circular(23)), ",
 "               ), ",
 "             ), ",
 "             const SizedBox(height: 16), ",
 "             GestureDetector( ",
 "               onTap: () async {}, ",
 "               child: Container( ",
 "                 decoration: BoxDecoration( ",
 "                     color: Colors.deepOrange, ",
 "                     borderRadius: BorderRadius.circular(20)), ",
 "                 child: const Center( ",
 "                   child: Padding( ",
 "                     padding: EdgeInsets.all(12.0), ",
 "                     child: Text('Submit', ",
 "                         style: TextStyle( ",
 "                             color: Colors.white, ",
 "                             fontSize: 25, ",
 "                             fontFamily: 'cbold')), ",
 "                   ), ",
 "                 ), ",
 "               ), ",
 "             ), ",
 "           ], ",
 "         ), ",
 "       ), ",
 "     ); ",
 "   } ",
 " } ",
 "  ",
 " ///////////////////////////////// ",
 " ///   For SignUp ",
 " //////////////////////// ",
 " class Signup extends StatefulWidget { ",
 "   const Signup({Key? key}) : super(key: key); ",
 "  ",
 "   @override ",
 "   State<Signup> createState() => _SignupState(); ",
 " } ",
 "  ",
 " class _SignupState extends State<Signup> { ",
 "   @override ",
 "   void initState() { ",
 "     super.initState(); ",
 "   } ",
 "  ",
 "   TextEditingController nametextcont = TextEditingController(); ",
 "   TextEditingController passtextcont = TextEditingController(); ",
 "   TextEditingController emailtextcont = TextEditingController(); ",
 "   TextEditingController seckeytextcont = TextEditingController(); ",
 "  ",
 "   // @override ",
 "   // void initState() { ",
 "   //   chekhivef(); ",
 "   //   super.initState(); ",
 "   // } ",
 "  ",
 "   bool agreeval = false; ",
 "   @override ",
 "   Widget build(BuildContext context) { ",
 "     return Scaffold( ",
 "       appBar: AppBar( ",
 "         leading: IconButton( ",
 "             onPressed: () { ",
 "               Navigator.pop(context); ",
 "             }, ",
 "             icon: const Icon( ",
 "               Icons.arrow_back_ios_new, ",
 "               color: Colors.black, ",
 "             )), ",
 "         systemOverlayStyle: const SystemUiOverlayStyle( ",
 "           statusBarColor: Colors.white, ",
 "           statusBarIconBrightness: Brightness.dark, ",
 "         ), ",
 "         backgroundColor: Colors.transparent, ",
 "         elevation: 0, ",
 "       ), ",
 "       body: Padding( ",
 "         padding: const EdgeInsets.all(14.0), ",
 "         child: ListView( ",
 "           children: [ ",
 "             const ListTile( ",
 "                 contentPadding: EdgeInsets.all(0), ",
 "                 title: Text( ",
 "                   'Sign Up', ",
 "                   style: TextStyle( ",
 "                       color: Colors.black, ",
 "                       fontSize: 23, ",
 "                       fontFamily: 'clight', ",
 "                       fontWeight: FontWeight.bold), ",
 "                 ), ",
 "                 subtitle: Text( ",
 "                   'Create Account', ",
 "                   style: TextStyle(color: Colors.black, fontFamily: 'clight'), ",
 "                 )), ",
 "             const SizedBox(height: 16), ",
 "             TextField( ",
 "               controller: nametextcont, ",
 "               decoration: InputDecoration( ",
 "                 prefixIcon: const Icon(Icons.person_outline_outlined), ",
 "                 hintText: 'Full Name', ",
 "                 helperStyle: const TextStyle(fontSize: 10), ",
 "                 disabledBorder: OutlineInputBorder( ",
 "                     borderSide: ",
 "                         const BorderSide(width: 0.05, color: Colors.blueGrey), ",
 "                     borderRadius: BorderRadius.circular(23)), ",
 "                 border: OutlineInputBorder( ",
 "                   borderRadius: BorderRadius.circular(23), ",
 "                   borderSide: const BorderSide(width: 0.05), ",
 "                 ), ",
 "                 errorBorder: OutlineInputBorder( ",
 "                     borderSide: BorderSide( ",
 "                         width: 0.05, color: Colors.deepOrange.withOpacity(0.8)), ",
 "                     borderRadius: BorderRadius.circular(23)), ",
 "               ), ",
 "             ), ",
 "             const SizedBox(height: 16), ",
 "             TextField( ",
 "               controller: emailtextcont, ",
 "               decoration: InputDecoration( ",
 "                 prefixIcon: const Icon(Icons.email_outlined), ",
 "                 hintText: 'Email', ",
 "                 helperStyle: const TextStyle(fontSize: 10), ",
 "                 disabledBorder: OutlineInputBorder( ",
 "                     borderSide: ",
 "                         const BorderSide(width: 0.05, color: Colors.blueGrey), ",
 "                     borderRadius: BorderRadius.circular(23)), ",
 "                 border: OutlineInputBorder( ",
 "                   borderRadius: BorderRadius.circular(23), ",
 "                   borderSide: const BorderSide(width: 0.05), ",
 "                 ), ",
 "                 errorBorder: OutlineInputBorder( ",
 "                     borderSide: BorderSide( ",
 "                         width: 0.05, color: Colors.deepOrange.withOpacity(0.8)), ",
 "                     borderRadius: BorderRadius.circular(23)), ",
 "               ), ",
 "             ), ",
 "             const SizedBox(height: 16), ",
 "             TextField( ",
 "               controller: passtextcont, ",
 "               decoration: InputDecoration( ",
 "                 prefixIcon: const Icon(Icons.password_outlined), ",
 "                 hintText: 'Password', ",
 "                 helperStyle: const TextStyle(fontSize: 10), ",
 "                 disabledBorder: OutlineInputBorder( ",
 "                     borderSide: ",
 "                         const BorderSide(width: 0.05, color: Colors.blueGrey), ",
 "                     borderRadius: BorderRadius.circular(23)), ",
 "                 border: OutlineInputBorder( ",
 "                   borderRadius: BorderRadius.circular(23), ",
 "                   borderSide: const BorderSide(width: 0.05), ",
 "                 ), ",
 "                 errorBorder: OutlineInputBorder( ",
 "                     borderSide: BorderSide( ",
 "                         width: 0.05, color: Colors.deepOrange.withOpacity(0.8)), ",
 "                     borderRadius: BorderRadius.circular(23)), ",
 "               ), ",
 "             ), ",
 "             const SizedBox(height: 16), ",
 "             TextField( ",
 "               controller: seckeytextcont, ",
 "               decoration: InputDecoration( ",
 "                 prefixIcon: const Icon(Icons.password_outlined), ",
 "                 hintText: 'Secret Key', ",
 "                 helperStyle: const TextStyle(fontSize: 10), ",
 "                 disabledBorder: OutlineInputBorder( ",
 "                     borderSide: ",
 "                         const BorderSide(width: 0.05, color: Colors.blueGrey), ",
 "                     borderRadius: BorderRadius.circular(23)), ",
 "                 border: OutlineInputBorder( ",
 "                   borderRadius: BorderRadius.circular(23), ",
 "                   borderSide: const BorderSide(width: 0.05), ",
 "                 ), ",
 "                 errorBorder: OutlineInputBorder( ",
 "                     borderSide: BorderSide( ",
 "                         width: 0.05, color: Colors.deepOrange.withOpacity(0.8)), ",
 "                     borderRadius: BorderRadius.circular(23)), ",
 "               ), ",
 "             ), ",
 "             const SizedBox(height: 16), ",
 "             ListTile( ",
 "               leading: Checkbox( ",
 "                 shape: RoundedRectangleBorder( ",
 "                   borderRadius: BorderRadius.circular(5), ",
 "                 ), ",
 "                 side: const BorderSide( ",
 "                   color: Colors.deepOrange, ",
 "                   width: 0.58, ",
 "                 ), ",
 "                 splashRadius: 30, ",
 "                 value: agreeval, ",
 "                 onChanged: (v) { ",
 "                   setState(() { ",
 "                     agreeval = !agreeval; ",
 "                   }); ",
 "                 }, ",
 "                 materialTapTargetSize: MaterialTapTargetSize.shrinkWrap, ",
 "                 visualDensity: VisualDensity.compact, ",
 "                 checkColor: Colors.white, ",
 "               ), ",
 "               title: Container( ",
 "                 margin: const EdgeInsets.only(right: 10.0), ",
 "                 child: Row( ",
 "                   children: [ ",
 "                     const Text( ",
 "                       'i agree with', ",
 "                       style: TextStyle( ",
 "                         fontSize: 12, ",
 "                         fontFamily: 'clight', ",
 "                       ), ",
 "                     ), ",
 "                     TextButton( ",
 "                         onPressed: () { ",
 "                           Navigator.push( ",
 "                             context, ",
 "                             MaterialPageRoute( ",
 "                               builder: (context) => const Termsandcondition(), ",
 "                             ), ",
 "                           ); ",
 "                         }, ",
 "                         child: const Text( ",
 "                           'Terms & Privacy', ",
 "                           style: TextStyle( ",
 "                             color: Colors.deepOrangeAccent, ",
 "                             fontSize: 12, ",
 "                             fontFamily: 'clight', ",
 "                           ), ",
 "                         )) ",
 "                   ], ",
 "                 ), ",
 "               ), ",
 "             ), ",
 "             const SizedBox(height: 16), ",
 "             GestureDetector( ",
 "               onTap: () {}, ",
 "               child: agreeval ",
 "                   ? Container( ",
 "                       decoration: BoxDecoration( ",
 "                           color: Colors.deepOrange, ",
 "                           borderRadius: BorderRadius.circular(20)), ",
 "                       child: const Center( ",
 "                         child: Padding( ",
 "                           padding: EdgeInsets.all(12.0), ",
 "                           child: Text('Sign Up', ",
 "                               style: TextStyle( ",
 "                                   color: Colors.white, ",
 "                                   fontSize: 25, ",
 "                                   fontFamily: 'cbold')), ",
 "                         ), ",
 "                       ), ",
 "                     ) ",
 "                   : Container( ",
 "                       decoration: BoxDecoration( ",
 "                           color: const Color.fromARGB(139, 255, 86, 34), ",
 "                           borderRadius: BorderRadius.circular(20)), ",
 "                       child: const Center( ",
 "                         child: Padding( ",
 "                           padding: EdgeInsets.all(12.0), ",
 "                           child: Text('Sign Up', ",
 "                               style: TextStyle( ",
 "                                   color: Colors.white, ",
 "                                   fontSize: 25, ",
 "                                   fontFamily: 'cbold')), ",
 "                         ), ",
 "                       ), ",
 "                     ), ",
 "             ), ",
 "             SizedBox(height: MediaQuery.of(context).size.height * 0.4 / 4), ",
 "             Center( ",
 "               child: Row( ",
 "                 mainAxisAlignment: MainAxisAlignment.center, ",
 "                 children: [ ",
 "                   const Text('Already have an account?'), ",
 "                   TextButton( ",
 "                       onPressed: () { ",
 "                         Navigator.push( ",
 "                           context, ",
 "                           MaterialPageRoute( ",
 "                             builder: (context) => const Login(), ",
 "                           ), ",
 "                         ); ",
 "                       }, ",
 "                       child: const Text( ",
 "                         'Login', ",
 "                         style: TextStyle( ",
 "                             color: Colors.black, ",
 "                             fontFamily: 'cbold', ",
 "                             fontWeight: FontWeight.bold, ",
 "                             fontSize: 17), ",
 "                       )) ",
 "                 ], ",
 "               ), ",
 "             ), ",
 "           ], ",
 "         ), ",
 "       ), ",
 "     ); ",
 "   } ",
 " } ",
 "  ",
 "  ",
 "  ",
 " ///// start terms and condition and policey ",
 "  ",
 " class Termsandcondition extends StatelessWidget { ",
 "   const Termsandcondition({super.key}); ",
 "  ",
 "   @override ",
 "   Widget build(BuildContext context) { ",
 "     return Scaffold( ",
 "       appBar: AppBar( ",
 "         title: const Text( ",
 "           'Terms & Conditions', ",
 "           style: TextStyle(color: Colors.grey), ",
 "         ), ",
 "         systemOverlayStyle: const SystemUiOverlayStyle( ",
 "           statusBarColor: Colors.white, ",
 "           statusBarIconBrightness: Brightness.dark, ",
 "         ), ",
 "         backgroundColor: Colors.transparent, ",
 "         elevation: 0, ",
 "         leading: IconButton( ",
 "             onPressed: () { ",
 "               Navigator.pop(context); ",
 "             }, ",
 "             icon: const Icon( ",
 "               Icons.arrow_back_ios_new, ",
 "               color: Colors.black, ",
 "             )), ",
 "       ), ",
 "       body: SingleChildScrollView( ",
 "         physics: const BouncingScrollPhysics(), ",
 "         child: Column( ",
 "           children: [ ",
 "             const Text( ",
 "               '1. ACCEPTANCE OF TERMS', ",
 "               style: TextStyle(fontWeight: FontWeight.bold, fontSize: 16), ",
 "             ), ",
 "             const SizedBox(height: 10), ",
 "             const Text( ",
 "               'By accessing and using the workout app, you agree to be bound by these terms and conditions, as well as our privacy policy.', ",
 "               style: TextStyle(fontSize: 14), ",
 "             ), ",
 "             TextButton( ",
 "                 onPressed: () { ",
 "                   Navigator.push( ",
 "                     context, ",
 "                     MaterialPageRoute( ",
 "                       builder: (context) => const PrivaceyPolicey(), ",
 "                     ), ",
 "                   ); ",
 "                 }, ",
 "                 child: const Text('Privacy Policey')), ",
 "             const SizedBox(height: 20), ",
 "             const Text( ",
 "               '2. USE OF APP', ",
 "               style: TextStyle(fontWeight: FontWeight.bold, fontSize: 16), ",
 "             ), ",
 "             const SizedBox(height: 10), ",
 "             const Text( ",
 "               'You may use the app for your personal, non-commercial use only. You may not modify, copy, distribute, transmit, display, perform, reproduce, publish, license, create derivative works from, transfer, or sell any information, software, products or services obtained from the app.', ",
 "               style: TextStyle(fontSize: 14), ",
 "             ), ",
 "             const SizedBox(height: 20), ",
 "             const Text( ",
 "               '3. ACCOUNT REGISTRATION', ",
 "               style: TextStyle(fontWeight: FontWeight.bold, fontSize: 16), ",
 "             ), ",
 "             const SizedBox(height: 10), ",
 "             const Text( ",
 "               'To use certain features of the app, you may need to create an account. You agree to provide accurate and complete information when registering for an account, and to keep your account information up-to-date. You are responsible for maintaining the confidentiality of your account login credentials and for all activities that occur under your account.', ",
 "               style: TextStyle(fontSize: 14), ",
 "             ), ",
 "             const SizedBox(height: 20), ",
 "             const Text( ",
 "               '4. CONTENT AND INTELLECTUAL PROPERTY', ",
 "               style: TextStyle(fontWeight: FontWeight.bold, fontSize: 16), ",
 "             ), ",
 "             const SizedBox(height: 10), ",
 "             const Text( ",
 "               'All content and materials available on the app, including but not limited to text, graphics, logos, images, videos, and software, are the property of the app or its licensors and are protected by copyright, trademark, and other intellectual property laws. You may not use, copy, reproduce, modify, distribute, transmit, display, publish, sell, license, or create derivative works from any such content or materials.',   ",
 "               style: TextStyle(fontSize: 14), ",
 "             ), ",
 "             const SizedBox(height: 20), ",
 "             const Text( ",
 "               '5. DISCLAIMER OF WARRANTIES', ",
 "               style: TextStyle(fontWeight: FontWeight.bold, fontSize: 16), ",
 "             ), ",
 "             const SizedBox(height: 10), ",
 "             const Text( ",
 "               'The app is provided on an 'as is' and 'as available' basis, without any warranties of any kind, either express or implied. The app does not guarantee that the app will be error-free, uninterrupted, or free of viruses or other harmful components. The app is not responsible for any damage to your device or loss of data that may result from your use of the app.', ",
 "               style: TextStyle(fontSize: 14), ",
 "             ), ",
 "             const SizedBox(height: 20), ",
 "             const Text( ",
 "               '6. LIMITATION OF LIABILITY', ",
 "               style: TextStyle(fontWeight: FontWeight.bold, fontSize: 16), ",
 "             ), ",
 "             const SizedBox(height: 10), ",
 "             const Text( ",
 "               'The app shall not be liable for any direct, indirect, incidental, special, or consequential damages arising out of or in connection with your use of the app, including but not limited to damages for loss of profits, goodwill, use, data, or other intangible losses..', ",
 "               style: TextStyle(fontSize: 14), ",
 "             ), ",
 "             const SizedBox(height: 20), ",
 "             const Text( ",
 "               '7. MODIFICATIONS TO TERMS AND APP', ",
 "               style: TextStyle(fontWeight: FontWeight.bold, fontSize: 16), ",
 "             ), ",
 "             const SizedBox(height: 10), ",
 "             const Text( ",
 "               'The app reserves the right to modify these terms and conditions and the app at any time, without notice. Your continued use of the app after such modifications will constitute your agreement to be bound by the modified terms and conditions.', ",
 "               style: TextStyle(fontSize: 14), ",
 "             ), ",
 "             const SizedBox(height: 20), ",
 "             const Text( ",
 "               '8. GOVERNING LAW AND JURISDICTION', ",
 "               style: TextStyle(fontWeight: FontWeight.bold, fontSize: 16), ",
 "             ), ",
 "             const SizedBox(height: 10), ",
 "             const Text( ",
 "               'These terms and conditions shall be governed by and construed in accordance with the laws of [insert jurisdiction]. Any dispute arising out of or in connection with these terms and conditions shall be subject to the exclusive jurisdiction of the courts of [insert jurisdiction].', ",
 "               style: TextStyle(fontSize: 14), ",
 "             ), ",
 "             const SizedBox(height: 20), ",
 "             const Text( ",
 "               'By using this app, you agree to these terms and conditions. If you do not agree to these terms and conditions, do not use the app.', ",
 "               style: TextStyle(color: Colors.deepOrange, fontSize: 12), ",
 "             ), ",
 "             // Add more sections as needed ",
 "           ], ",
 "         ), ",
 "       ), ",
 "     ); ",
 "   } ",
 " } ",
 "  ",
 " class PrivaceyPolicey extends StatelessWidget { ",
 "   const PrivaceyPolicey({super.key}); ",
 "  ",
 "   @override ",
 "   Widget build(BuildContext context) { ",
 "     return Scaffold( ",
 "       appBar: AppBar( ",
 "         title: const Text( ",
 "           'Privacy Policey', ",
 "           style: TextStyle(color: Colors.grey), ",
 "         ), ",
 "         systemOverlayStyle: const SystemUiOverlayStyle( ",
 "           statusBarColor: Colors.white, ",
 "           statusBarIconBrightness: Brightness.dark, ",
 "         ), ",
 "         backgroundColor: Colors.transparent, ",
 "         elevation: 0, ",
 "         leading: IconButton( ",
 "             onPressed: () { ",
 "               Navigator.pop(context); ",
 "             }, ",
 "             icon: const Icon( ",
 "               Icons.arrow_back_ios_new, ",
 "               color: Colors.black, ",
 "             )), ",
 "       ), ",
 "       body: SingleChildScrollView( ",
 "         physics: const BouncingScrollPhysics(), ",
 "         child: Column( ",
 "           children: const [ ",
 "             Text( ",
 "               '1. Information We Collect', ",
 "               style: TextStyle(fontWeight: FontWeight.bold, fontSize: 16), ",
 "             ), ",
 "             SizedBox(height: 10), ",
 "             Text( ",
 "               'We may collect information from you when you use our app, including your name, email address, and workout information. We may also collect information automatically, such as your device type, IP address, and usage data.', ",
 "               style: TextStyle(fontSize: 14), ",
 "             ), ",
 "             SizedBox(height: 20), ",
 "             Text( ",
 "               '2. How We Use Your Information', ",
 "               style: TextStyle(fontWeight: FontWeight.bold, fontSize: 16), ",
 "             ), ",
 "             SizedBox(height: 10), ",
 "             Text( ",
 "               'We may use the information we collect from you to personalize your workout experience, improve our app, and communicate with you about our services. We may also share your information with third-party service providers that help us operate our app.', ",
 "               style: TextStyle(fontSize: 14), ",
 "             ), ",
 "             SizedBox(height: 20), ",
 "             Text( ",
 "               '3. Cookies and Similar Technologies', ",
 "               style: TextStyle(fontWeight: FontWeight.bold, fontSize: 16), ",
 "             ), ",
 "             SizedBox(height: 10), ",
 "             Text( ",
 "               'We may use cookies and similar technologies to collect information about your use of our app and to improve your experience. You can manage your cookie settings in your device or browser settings.', ",
 "               style: TextStyle(fontSize: 14), ",
 "             ), ",
 "             SizedBox(height: 20), ",
 "             Text( ",
 "               '4. Third-Party Links', ",
 "               style: TextStyle(fontWeight: FontWeight.bold, fontSize: 16), ",
 "             ), ",
 "             SizedBox(height: 10), ",
 "             Text( ",
 "               'Our app may contain links to third-party websites or services that are not owned or controlled by us. We are not responsible for the privacy practices of these third-party websites or services. We encourage you to review the privacy policies of these third-party websites or services before providing any personal information', ",
 "               style: TextStyle(fontSize: 14), ",
 "             ), ",
 "             SizedBox(height: 20), ",
 "             Text( ",
 "               '5. Children`s Privacy', ",
 "               style: TextStyle(fontWeight: FontWeight.bold, fontSize: 16), ",
 "             ), ",
 "             SizedBox(height: 10), ",
 "             Text( ",
 "               'Our app is not intended for children under the age of 13. We do not knowingly collect personal information from children under the age of 13. If you are under the age of 13, please do not use our app or provide any personal information to us.', ",
 "               style: TextStyle(fontSize: 14), ",
 "             ), ",
 "             SizedBox(height: 20), ",
 "  ",
 "             Text( ",
 "               '6. Changes to This Privacy Policy', ",
 "               style: TextStyle(fontWeight: FontWeight.bold, fontSize: 16), ",
 "             ), ",
 "             SizedBox(height: 10), ",
 "             Text( ",
 "               'We may update our privacy policy from time to time. We will notify you of any changes by posting the new privacy policy on this page. You are advised to review this privacy policy periodically for any changes.', ",
 "               style: TextStyle(fontSize: 14), ",
 "             ), ",
 "  ",
 "             SizedBox(height: 10), ",
 "             Text( ",
 "               'If you have any questions about our privacy policy, please contact us at [insert your contact information].', ",
 "               style: TextStyle(color: Colors.deepOrange, fontSize: 12), ",
 "             ), ",
 "             // Add more sections as needed ",
 "           ], ",
 "         ), ",
 "       ), ",
 "     ); ",
 "   } ",
 " } ",

],
  
  "description": "orange workout type login signup page with terms and condition and policey pages"
},
 // 53

 "fpgk" : {
  "prefix": "-fpgk",
  "scope": "dart",
  "body": [

],
  
  "description": "fpgk"
},
 // 54

 "asdfgh" : {
  "prefix": "-asdfgh",
  "scope": "dart",
  "body": [

],
  
  "description": "asdfgh"
},





}






















